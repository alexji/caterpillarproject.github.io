<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Brendan Griffen</title>
        <description>Astrophysicist.</description>      
        <link>http://brendangriffen.com</link>
        <atom:link href="http://brendangriffen.com/feed.xml" rel="self" type="application/rss+xml" />
        
            <item>
                <title>Making Spotify Playlists In Python Based On Upcoming Local Bands</title>
                <description>&lt;p&gt;Today it is extremely easy to access music. The days of celebrating 4kb/s via Napster are long over. For a small fee or even for free, you can access large quantities of music, on demand. If you know of a band or song, it is easy to find it on Youtube or Spotify (or any of the other services). This is great if you &lt;em&gt;already know&lt;/em&gt; the music you are looking for. What about for bands you haven&amp;#39;t heard? Yes, there are ways to &lt;a href=&quot;http://techcrunch.com/2012/12/06/spotify-following/&quot;&gt;discover new music based on current tastes&lt;/a&gt; but what about something a little closer to home - what about finding new music which happens to be playing in your local area? &lt;/p&gt;

&lt;h1&gt;The Problem&lt;/h1&gt;

&lt;p&gt;Ordinarily you might go to a website which lists local bands. Then the process of copying and pasting the band names into your music provider manually to hear what sort of music they offered would follow. Many hours of human life are wasted all over the world in carrying out this monotonous process. Continually doing this led to my idea of automating this tedious process via a short and simple program.&lt;/p&gt;

&lt;h1&gt;A Solution&lt;/h1&gt;

&lt;p&gt;A short program which finds bands with upcoming shows in your area and loads them into a Spotify playlist, auto-magically.&lt;/p&gt;

&lt;h1&gt;The Data&lt;/h1&gt;

&lt;p&gt;My data source for bands is the well known, &lt;a href=&quot;http://www.boweryboston.com/see-all-shows/&quot;&gt;Bowery Boston&lt;/a&gt; which  promotes upcoming bands playing in the Boston area.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/spotifylocalbands/bowery_boston.png&quot;&gt;&lt;img src=&quot;/assets/spotifylocalbands/bowery_boston.png&quot; alt=&quot;spotify-playlists&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using this list I created a Spotify playlist containing the top few tracks (as judged by Spotify) of each of the bands about to have a show. I now run this once a month and sync it to my phone. If there is any new music which catches my ear and the price is right, I&amp;#39;ll go ahead and buy a ticket.&lt;/p&gt;

&lt;p&gt;My only point of reference was &lt;a href=&quot;https://mborgerson.com/creating-a-playlist-in-spotify-using-python/&quot;&gt;this nice post&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/MattBorgerson&quot;&gt;Matt Borgerson&lt;/a&gt;. His &lt;a href=&quot;https://github.com/mborgerson/spotify-playlist-from-csv&quot;&gt;original code&lt;/a&gt; converted a csv file into a playlist - which is a great tool if you already know what bands &lt;em&gt;and&lt;/em&gt; tracks you want to listen to. I had to design something slightly different.&lt;/p&gt;

&lt;h1&gt;The Code&lt;/h1&gt;

&lt;p&gt;For this code to work you require Python, libspotify, the pyspotify bindings and critically a Premium Spotify account ($9.99/month, sorry). Alternatively, you can just scroll to the end of this post to get the Spotify link and I can updated the playlist for you. This code can be found at &lt;a href=&quot;https://github.com/bgriffen/spotifylocalbands&quot;&gt;this Github repository&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import requests
import bs4
import spotify
import sys

&amp;quot;&amp;quot;&amp;quot;
Contact: Brendan Griffen brendan.f.griffen@gmail.com @brendangriffen

Code will scrape bands playing in next few months in Boston area.

Requirements:

libspotify:     https://developer.spotify.com/technologies/libspotify/
pyspotify:      https://github.com/mopidy/pyspotify
developer key:  https://devaccount.spotify.com/my-account/keys/

Enjoy the tunes!

&amp;quot;&amp;quot;&amp;quot;

session = spotify.Session()
session.login(&amp;#39;username&amp;#39;, &amp;#39;password&amp;#39;)

url_name = &amp;quot;http://www.boweryboston.com/see-all-shows/&amp;quot;

response = requests.get(url_name)
soup = bs4.BeautifulSoup(response.text)

# scrape the relevant information and put into a list
bands_split = [elm.a.text.split(&amp;quot;,&amp;quot;) for elm in soup.find_all(&amp;#39;h1&amp;#39;,class_=&amp;#39;headliners summary&amp;#39;)]

# don&amp;#39;t forget the support acts!
supports = [elm.a.text for elm in soup.find_all(&amp;#39;h2&amp;#39;,class_=&amp;#39;supports&amp;#39;)]

bands = sum(bands_split,[])

all_bands = list(set(bands+supports))

print &amp;quot;Upcoming bands playing around Boston.&amp;quot;

for band in all_bands:
    print band

# try a few times to connect
for i in xrange(0,5):
    session.process_events()

print
print &amp;quot;Adding TOP 3 songs of each band to a Spotify playlist...&amp;quot;
all_tracks = []
for band in all_bands:
    search = session.search(str(band))
    search.load()
    if len(search.tracks) &amp;gt; 0:
        # take the top 5 tracks
        for i,track in enumerate(search.tracks):
            if i &amp;lt;= 2: all_tracks.append(track)

print &amp;quot;Adding %i band, totaling %i tracks!&amp;quot; % (len(all_bands),len(all_tracks))
session.playlist_container.add_new_playlist(&amp;quot;Upcoming LIVE Boston Music&amp;quot;)
playlist = session.playlist_container[-1]

print &amp;quot;Adding tracks to:&amp;quot;,playlist.name
playlist.add_tracks(all_tracks)
playlist.load()

print
print &amp;quot;Check your new playlist soon!&amp;quot;

# check the playlist now exists!
for playlisti in session.playlist_container:
    print playlisti.name

session.logout()

print
print &amp;quot;Check your new playlist soon!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The terminal output will be something like the following:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;Upcoming bands playing around Boston....
Wild Child
Future Islands
Caroline Smith
Rohan Padhye
Sylvan Esso
The Green
Sidewalk Driver
The Fagettes
Abhishek Shah
Front Porch Step
Cropduster
Preservation Hall Jazz Band
Sorority Noise
The Beautiful Ones
...
Adding TOP 3 songs of each band to a Spotify playlist...
Adding 222 band, totaling 541 tracks!
Adding tracks to playlist: Upcoming LIVE Boston Music&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;small caveat: rarely the program will scrape the wrong band - please forgive me if it does.&lt;/em&gt;&lt;/p&gt;

&lt;h1&gt;The Result&lt;/h1&gt;

&lt;p&gt;Here is an example of what one of these playlists might look like inside Spotify. It may take a short while for it to show up (a restart sometimes helps).&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/spotifylocalbands/spotify_playlist.png&quot;&gt;&lt;img src=&quot;/assets/spotifylocalbands/spotify_playlist.png&quot; alt=&quot;spotify-playlists&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h1&gt;Take Home Message&lt;/h1&gt;

&lt;p&gt;I made &lt;a href=&quot;http://open.spotify.com/user/1254170771/playlist/5QKiOM9egThI6u6oXgkTNh&quot;&gt;this playlist public&lt;/a&gt; for those that aren&amp;#39;t too comfortable programming so feel free to follow it if you are in the Boston area (this will work if you have a free account). I&amp;#39;ll use my Premium account update it periodically =)&lt;/p&gt;

&lt;p&gt;If you know of a website which compiles local music in your area perhaps you could try to modify what I&amp;#39;ve done and make your own playlist. In any case, I hope you enjoy the new music, soon to be playing live, somewhere near you.&lt;/p&gt;
</description>
                <pubDate>Mon, 22 Dec 2014 00:00:00 -0500</pubDate>
                <link>http://brendangriffen.com/blog/making-spotify-playlists-in-python-based-on-upcoming-local-bands</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/making-spotify-playlists-in-python-based-on-upcoming-local-bands</guid>
            </item>
        
            <item>
                <title>Generating An Institute&#39;s Publication Profile</title>
                <description>&lt;p&gt;Today I wanted to get an idea of my home institute&amp;#39;s publication profile based on the &lt;a href=&quot;http://space.mit.edu/people/all&quot;&gt;staff list from its own website&lt;/a&gt;. I&amp;#39;m sure if you&amp;#39;re in academia you would have the same for your own. My list includes members which belong to various categories: faculty, affiliated faculty, postdoctoral scholar, student and technical staff.&lt;/p&gt;

&lt;p&gt;To build the profile, we need to make use of ADS metrics. For example we can search for a paper of interest on ADS labs:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/adspython/example_paper.png&quot;&gt;&lt;img src=&quot;/assets/adspython/example_paper.png&quot; alt=&quot;Paper&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Then we can click on &lt;code&gt;Analyze&lt;/code&gt; in the top right to bring up a new panel of information:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/adspython/example_metrics.png&quot;&gt;&lt;img src=&quot;/assets/adspython/example_metric.png&quot; alt=&quot;Metric&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using &lt;a href=&quot;https://github.com/andycasey/ads&quot;&gt;ADS-python&lt;/a&gt;, I can access these metrics for an author with the simple line:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import ads
metrics = ads.metrics(author_name)

print metrics[0]

{u&amp;#39;all_reads&amp;#39;: {u&amp;#39;Average_number_of_downloads&amp;#39;: 73.0,
  u&amp;#39;Average_number_of_reads&amp;#39;: 218.8,
  u&amp;#39;Median_number_of_downloads&amp;#39;: 53.0,
  u&amp;#39;Median_number_of_reads&amp;#39;: 173.5,
  u&amp;#39;Normalized_number_of_downloads&amp;#39;: 1.8,
  u&amp;#39;Normalized_number_of_reads&amp;#39;: 5.2,
  u&amp;#39;Total_number_of_downloads&amp;#39;: 1460,
  u&amp;#39;Total_number_of_reads&amp;#39;: 4375},
 u&amp;#39;all_stats&amp;#39;: {u&amp;#39;Average_citations&amp;#39;: 9.6,
  u&amp;#39;Average_refereed_citations&amp;#39;: 5.9,
  u&amp;#39;H-index&amp;#39;: 7,
  u&amp;#39;Median_citations&amp;#39;: 5.5,
  u&amp;#39;Median_refereed_citations&amp;#39;: 2.0,
  u&amp;#39;Normalized_citations&amp;#39;: 0.2,
  u&amp;#39;Normalized_paper_count&amp;#39;: 0.1,
  u&amp;#39;Normalized_refereed_citations&amp;#39;: 0.1,
  u&amp;#39;Number_of_citing_papers&amp;#39;: 160,
  u&amp;#39;Number_of_papers&amp;#39;: 20,
  u&amp;#39;Refereed_citations&amp;#39;: 118,
  u&amp;#39;Total_citations&amp;#39;: 192,
  u&amp;#39;e-index&amp;#39;: 10.2,
  u&amp;#39;g-index&amp;#39;: 13,
  u&amp;#39;i10-index&amp;#39;: 5,
  u&amp;#39;i100-index&amp;#39;: 0,
  u&amp;#39;m-index&amp;#39;: 3.5,
  u&amp;#39;read10_index&amp;#39;: 1,
  u&amp;#39;roq_index&amp;#39;: 41.0,
  u&amp;#39;self-citations&amp;#39;: 12,
  u&amp;#39;tori_index&amp;#39;: 0.0},
 u&amp;#39;citation_histogram&amp;#39;: {u&amp;#39;2013&amp;#39;: [23.0,
   19.0,
   23.0,
   19.0,
   0.0309913153179,
   0.0251989779794,
   0.0309913153179,
   0.0251989779794],
  u&amp;#39;2014&amp;#39;: [169.0,
   99.0,
   154.0,
   97.0,
   0.207952689976,
   0.123712598875,
   0.190817259927,
   0.121428547883],
  u&amp;#39;type&amp;#39;: u&amp;#39;citation_histogram&amp;#39;},
 u&amp;#39;metrics_series&amp;#39;: {u&amp;#39;2013&amp;#39;: [2.0,
   4.0,
   1.0,
   0.00125995174574,
   2.0,
   35.0,
   0.0,
   0.0],
  u&amp;#39;2014&amp;#39;: [7.0, 13.0, 5.0, 0.00685960767226, 3.5, 41.0, 0.0, 0.0],
  u&amp;#39;type&amp;#39;: u&amp;#39;metrics_series&amp;#39;},
 u&amp;#39;paper_histogram&amp;#39;: {u&amp;#39;2013&amp;#39;: [4.0, 4.0, 0.00504776053564, 0.00504776053564],
  u&amp;#39;2014&amp;#39;: [16.0, 11.0, 0.0659490983056, 0.0125452264852],
  u&amp;#39;type&amp;#39;: u&amp;#39;publication_histogram&amp;#39;},
 u&amp;#39;reads_histogram&amp;#39;: {u&amp;#39;1996&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;1997&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;1998&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;1999&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2000&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2001&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2002&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2003&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2004&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2005&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2006&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2007&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2008&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2009&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2010&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2011&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2012&amp;#39;: [0.0, 0.0, 0.0, 0.0],
  u&amp;#39;2013&amp;#39;: [951.0, 951.0, 1.14041166693, 1.14041166693],
  u&amp;#39;2014&amp;#39;: [3424.0, 3037.0, 4.10556990785, 3.50217212234],
  u&amp;#39;type&amp;#39;: u&amp;#39;reads_histogram&amp;#39;},
 u&amp;#39;refereed_reads&amp;#39;: {u&amp;#39;Average_number_of_downloads&amp;#39;: 87.4,
  u&amp;#39;Average_number_of_reads&amp;#39;: 265.9,
  u&amp;#39;Median_number_of_downloads&amp;#39;: 55.0,
  u&amp;#39;Median_number_of_reads&amp;#39;: 179.0,
  u&amp;#39;Normalized_number_of_downloads&amp;#39;: 1.5,
  u&amp;#39;Normalized_number_of_reads&amp;#39;: 4.6,
  u&amp;#39;Total_number_of_downloads&amp;#39;: 1311,
  u&amp;#39;Total_number_of_reads&amp;#39;: 3988},
 u&amp;#39;refereed_stats&amp;#39;: {u&amp;#39;Average_citations&amp;#39;: 11.8,
  u&amp;#39;Average_refereed_citations&amp;#39;: 7.7,
  u&amp;#39;H-index&amp;#39;: 7,
  u&amp;#39;Median_citations&amp;#39;: 7.0,
  u&amp;#39;Median_refereed_citations&amp;#39;: 4.0,
  u&amp;#39;Normalized_citations&amp;#39;: 0.2,
  u&amp;#39;Normalized_paper_count&amp;#39;: 0.0,
  u&amp;#39;Normalized_refereed_citations&amp;#39;: 0.1,
  u&amp;#39;Number_of_citing_papers&amp;#39;: 150,
  u&amp;#39;Number_of_papers&amp;#39;: 15,
  u&amp;#39;Refereed_citations&amp;#39;: 116,
  u&amp;#39;Total_citations&amp;#39;: 177,
  u&amp;#39;e-index&amp;#39;: 10.2,
  u&amp;#39;g-index&amp;#39;: 13,
  u&amp;#39;i10-index&amp;#39;: 5,
  u&amp;#39;i100-index&amp;#39;: 0,
  u&amp;#39;m-index&amp;#39;: 3.5,
  u&amp;#39;read10_index&amp;#39;: 1,
  u&amp;#39;roq_index&amp;#39;: 40.0,
  u&amp;#39;self-citations&amp;#39;: 10,
  u&amp;#39;tori_index&amp;#39;: 0.0}}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Using this data, we can take a look at the distribution of citations, papers and number of people for each of the respective positions.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/adspython/mki_profile.png&quot;&gt;&lt;img src=&quot;/assets/adspython/mki_profile.png&quot; alt=&quot;MKI Profile&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;3 conclusions can be made about MKI:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;There are more students than any other position.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Students publish the most number of papers.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Postdocs, faculty and students roughly equally share overall citation count.&lt;/li&gt;
&lt;/ul&gt;
</description>
                <pubDate>Wed, 05 Nov 2014 00:00:00 -0500</pubDate>
                <link>http://brendangriffen.com/blog/institute-publication-profile</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/institute-publication-profile</guid>
            </item>
        
            <item>
                <title>Creating Digests Of The Astronomy Arxiv</title>
                <description>&lt;p&gt;I took another look at &lt;a href=&quot;https://github.com/andycasey/ads&quot;&gt;ADS-python&lt;/a&gt; (a python tool for ADS) developed by &lt;a href=&quot;http://astrowizici.st/&quot;&gt;Andy Casey&lt;/a&gt;. I modified his example script to email myself a digest of all of the papers published by my institute in the past month. I set it up as an automated cron job (&lt;code&gt;10 0 1 * * python script.py&lt;/code&gt;) to be run on the 1st of each month so I don&amp;#39;t have to run the script anymore to get the digest. You will need &lt;a href=&quot;https://github.com/alexandrevicenzi/fluentmail&quot;&gt;FluentMail&lt;/a&gt; for this to work. You will also need to allow Gmail to receive login requests from less familiar apps. If you want to use a different email client see &lt;a href=&quot;https://github.com/alexandrevicenzi/fluentmail#common-smtp-servers&quot;&gt;here&lt;/a&gt;. I&amp;#39;ve setup a &lt;a href=&quot;http://www.github.com/bgriffen/ads.git&quot;&gt;GitHub repository&lt;/a&gt; for these codes and future codes relating to work done with ADS.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# Core libraries
from time import localtime
import sys,os
import subprocess as sub

# Module Libraries
import ads
from fluentmail import FluentMail

mail = FluentMail(&amp;#39;smtp.gmail.com&amp;#39;, 465, &amp;#39;SSL&amp;#39;)
email_address = &amp;#39;brendan.f.griffen@gmail.com&amp;#39;
email_password = &amp;#39;password&amp;#39;
output_directory = &amp;quot;./&amp;quot;
download_papers = False
my_affiliation = &amp;#39;&amp;quot;Kavli Institute For Astrophysics&amp;quot;&amp;#39;

if __name__ == &amp;quot;__main__&amp;quot;:

    # Let&amp;#39;s do it for *last* month
    current_time = localtime()

    # Last month
    year = current_time.tm_year - 1 if current_time.tm_mon == 1 else current_time.tm_year
    month = current_time.tm_mon - 1 if current_time.tm_mon &amp;gt; 1 else 12
    
    # Get all the articles
    articles1 = ads.search(
        affiliation=my_affiliation,
        filter=&amp;quot;database:astronomy AND property:refereed&amp;quot;,
        dates=&amp;quot;{year}/{month}&amp;quot;.format(year=year, month=month))

    articles = list(articles1)
    print(&amp;quot;There were {0} articles found for {year}/{month} with MKI co-authors.&amp;quot;.format(len(articles),year=year, month=month))

    # Sort articles
    sorted_articles = sorted(articles,
        key=lambda article: [(my_affiliation.strip(&amp;#39;&amp;quot;&amp;#39;).lower() in affiliation.lower()) for affiliation in article.aff].index(True))

    # Option to download these papers
    if download_papers:
        output_folder = output_directory + &amp;quot;{year}_{month}&amp;quot;.format(year=year,month=month)
        cmd_make_this_months_folder = &amp;quot;mkdir -p &amp;quot; + output_folder
        sub.call([cmd_make_this_months_folder],shell=True)

        filename = output_folder + &amp;quot;/&amp;quot; + article.bibcode + &amp;quot;.pdf&amp;quot;
        if not os.path.isfile(filename):
            ads.retrieve_article(article, output_filename=output_folder + &amp;quot;/&amp;quot; + article.bibcode + &amp;quot;.pdf&amp;quot;)

    # Construct email content
    email_content = &amp;quot;There were {num} articles published by astronomy researchers from the {my_affiliation} last month ({year}/{month})&amp;quot;\
                    .format(num=len(articles),my_affiliation=my_affiliation,year=year,month=month)

    for article in sorted_articles:
        email_content += article.author[0].split(&amp;quot;,&amp;quot;)[0] + &amp;quot; et al.\n&amp;quot; +\
                         article.title[0] + &amp;quot;\n&amp;quot; + article.abstract + &amp;quot;\n&amp;quot; +\
                         article.url + &amp;quot;\n\n&amp;quot;

    # Email yourself the digest
    mail.credentials(email_address, email_password)\
    .from_address(email_address).to(email_address)\
    .subject(&amp;#39;Monthly Institute Arxiv Digest&amp;#39;)\
    .body(email_content)\
    .send()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is an example of what one of these emails might look like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/adspython/monthly_arxiv_digest.png&quot;&gt;&lt;img src=&quot;/assets/adspython/monthly_arxiv_digest.png&quot; alt=&quot;Digest&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I usually read new papers through my RSS reader &lt;a href=&quot;http://www.feedly.com&quot;&gt;Feedly&lt;/a&gt;, which has a feature which tells you roughly how many people have also bookmarked that paper (see the left side). I think this is a rough proxy for &amp;#39;interest&amp;#39; and I often take more notice of papers with a high number of bookmarks.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/adspython/feedly_popular_papers.png&quot;&gt;&lt;img src=&quot;/assets/adspython/feedly_popular_papers.png&quot; alt=&quot;Most popular&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;I wanted a &amp;#39;top 10 most popular&amp;#39; list from the ADS listings from &amp;#39;yesterday&amp;#39; - whenever that may be. It is convenient to know what is making headlines in the community.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# Core libraries
from time import localtime
import numpy as np

# Module Libraries
import ads
from fluentmail import FluentMail

mail = FluentMail(&amp;#39;smtp.gmail.com&amp;#39;, 465, &amp;#39;SSL&amp;#39;)
email_address = &amp;#39;brendan.f.griffen@gmail.com&amp;#39;
email_password = &amp;#39;password&amp;#39;
email_content = &amp;quot;&amp;quot;

if __name__ == &amp;quot;__main__&amp;quot;:
    current_time = localtime()
    year = current_time.tm_year
    month = current_time.tm_mon
    day = current_time.tm_mday-1 # yesterday
    
    # Get papers
    papers = list(ads.query(dates=&amp;quot;{year}/{month}/{day}&amp;quot;\
            .format(year=year, month=month, day=day),filter=&amp;quot;database:astronomy&amp;quot;, rows=200))

    # Get number of reads
    num_reads_list = []
    for paper in papers:
        num_reads = paper.metrics[&amp;#39;all_reads&amp;#39;][&amp;#39;Total_number_of_reads&amp;#39;]
        num_reads_list.append(num_reads)
    
    idx_num_reads = np.argsort(np.array(num_reads_list))[::-1]
    
    # Construct email content
    email_content = &amp;quot;Top viewed papers for {day}/{month}/{year}\n\n&amp;quot;\
                    .format(year=year, month=month, day=day)

    for idx,i in enumerate(idx_num_reads[:10]):
        email_content += str(idx+1) + &amp;quot;. &amp;quot; + \
        papers[i].author[0].split(&amp;quot;,&amp;quot;)[0] + &amp;quot; et al. &amp;gt; # reads: &amp;quot; + \
        str(papers[i].metrics[&amp;#39;all_reads&amp;#39;][&amp;#39;Total_number_of_reads&amp;#39;]) + &amp;quot;\n&amp;quot; + \
        papers[i].title[0] + &amp;quot;\n&amp;quot; + \
        papers[i].abstract + &amp;quot;\n&amp;quot; + \
        papers[i].url + &amp;quot;\n\n&amp;quot;
    
    print email_content
    # Email content
    mail.credentials(email_address, email_password)\
    .from_address(email_address)\
    .to(email_address)\
    .subject(&amp;quot;Yesterday&amp;#39;s most popular papers!&amp;quot;)\
    .body(email_content)\
    .send()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here is an example of what one of these emails might look like:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;/assets/adspython/yesterdays_most_popular.png&quot;&gt;&lt;img src=&quot;/assets/adspython/yesterdays_most_popular.png&quot; alt=&quot;Most popular&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is really only the beginning of the sort of thing you can do with nice Python-esk access to the ADS database.&lt;/p&gt;
</description>
                <pubDate>Tue, 04 Nov 2014 00:00:00 -0500</pubDate>
                <link>http://brendangriffen.com/blog/creating-digests-of-ads</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/creating-digests-of-ads</guid>
            </item>
        
            <item>
                <title>Music and Mortality</title>
                <description>&lt;p&gt;The &lt;a href=&quot;https://en.wikipedia.org/wiki/27_Club&quot;&gt;27-club&lt;/a&gt; is a group of musicians who have died at the age of 27. Charles Cross, a Hendrix biographer put it as follows:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The number of musicians who died at 27 is truly remarkable by any standard. [Although] humans die regularly at all ages, there is a statistical spike for musicians who die at 27.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There are a large number of famous musicians who have all died at the age of 27 (e.g. Brian Jones, Alan Wilson, Jimi Hendrix, Janis Joplin and Jim Morrison to name a few). Though, is this just bias on our part or does the data stack up? I decided to investigate the validity of this claim and dig a little deeper combining lifespan statistics within the classic genres, jazz, blues, rock, metal, folk and classical. I then combined the artist information with Last.fm&amp;#39;s API to get a proxy for the popularity of an artist now and see if there is any correlation with their lifespan. Do you tend to live a shorter life if you&amp;#39;re more popular? If you don&amp;#39;t have the time to read the whole post, here are my main conclusions:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;classical musicians live the longest on average&lt;/li&gt;
&lt;li&gt;metal musicians live the shortest on average&lt;/li&gt;
&lt;li&gt;all musicians seem to live shorter lives than average&lt;/li&gt;
&lt;li&gt;there is a very weak trend indicating that the more populare you are, the shorter your life span.&lt;/li&gt;
&lt;li&gt;there is no &amp;quot;27-club&amp;quot; when looking at the entire lifespans of the musicians in any genre (possible origins: romanticism)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Read on if you would like to learn how I came to these conclusions.&lt;/p&gt;

&lt;h2&gt;The Data&lt;/h2&gt;

&lt;p&gt;I needed a few things to tackle this problem. A list of artists and their known life spans and also some information about their popularity. I had already mined Wikipedia via DBpedia so I went back through some old code. You can execute it in the &lt;a href=&quot;http://dbpedia.org/sparql&quot;&gt;Virtuoso SPARQL Query Editory&lt;/a&gt;.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT DISTINCT str(?plabel) str(?glabel) 
       ?died ?born
       ( 
         IF 
           (
             ( datatype (?born) in (xsd:dateTime, xsd:date) )
             and
             ( datatype (?died) in (xsd:dateTime, xsd:date) ),
             bif:datediff(&amp;#39;year&amp;#39;,xsd:dateTime(str(?born)),xsd:dateTime(str(?died))),
             &amp;quot;error&amp;quot; 
           ) 
       ) AS ?age
WHERE 
  { 
    {
      SELECT DISTINCT ?person ?plabel ?genre ?glabel ?died ?born 
      FROM &amp;lt;http://dbpedia.org&amp;gt; 
      WHERE 
        { 
          ?person a &amp;lt;http://dbpedia.org/ontology/MusicalArtist&amp;gt; ;
                     &amp;lt;http://dbpedia.org/ontology/genre&amp;gt; ?genre ;
                  &amp;lt;http://dbpedia.org/ontology/deathDate&amp;gt; ?died ;
                                             rdfs:label ?plabel ;
                  &amp;lt;http://dbpedia.org/ontology/birthDate&amp;gt; ?born .
          ?genre rdfs:label ?glabel .
          FILTER ( lang(?plabel) = &amp;quot;en&amp;quot; )
          FILTER ( lang(?glabel) = &amp;quot;en&amp;quot; )
        }
      ORDER BY DESC ( &amp;lt;LONG::IRI_RANK&amp;gt; (?person) )
    }
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code extracts our the known information about the musicians and results in the following output:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;...
&amp;quot;Michael Jackson&amp;quot;,&amp;quot;Pop music&amp;quot;,2009-06-25,1958-08-29
&amp;quot;Michael Jackson&amp;quot;,&amp;quot;Rock music&amp;quot;,2009-06-25,1958-08-29
&amp;quot;Michael Jackson&amp;quot;,&amp;quot;Soul music&amp;quot;,2009-06-25,1958-08-29
&amp;quot;Michael Jackson&amp;quot;,&amp;quot;Disco&amp;quot;,2009-06-25,1958-08-29
&amp;quot;Michael Jackson&amp;quot;,&amp;quot;Funk&amp;quot;,2009-06-25,1958-08-29
&amp;quot;Michael Jackson&amp;quot;,&amp;quot;Rhythm and blues&amp;quot;,2009-06-25,1958-08-29
&amp;quot;Michael Jackson&amp;quot;,&amp;quot;New jack swing&amp;quot;,2009-06-25,1958-08-29
&amp;quot;Elvis Presley&amp;quot;,&amp;quot;Gospel music&amp;quot;,1977-08-16,1935-01-08
&amp;quot;Elvis Presley&amp;quot;,&amp;quot;Pop music&amp;quot;,1977-08-16,1935-01-08
&amp;quot;Elvis Presley&amp;quot;,&amp;quot;Blues&amp;quot;,1977-08-16,1935-01-08
&amp;quot;Elvis Presley&amp;quot;,&amp;quot;Country music&amp;quot;,1977-08-16,1935-01-08
&amp;quot;Elvis Presley&amp;quot;,&amp;quot;Rhythm and blues&amp;quot;,1977-08-16,1935-01-08
&amp;quot;Elvis Presley&amp;quot;,&amp;quot;Rock and roll&amp;quot;,1977-08-16,1935-01-08
&amp;quot;Elvis Presley&amp;quot;,&amp;quot;Rockabilly&amp;quot;,1977-08-16,1935-01-08
&amp;quot;George Harrison&amp;quot;,&amp;quot;Pop music&amp;quot;,2001-11-29,1943-02-25
...
9209 rows&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then had to get a way to find out how popular they were so I just searched through Spotify, Last.fm etc. until I found a convenient API and companion module which allowed me to get play counts. It turns out &lt;a href=&quot;http://www.last.fm/&quot;&gt;Last.fm&lt;/a&gt; has &lt;a href=&quot;http://www.last.fm/api&quot;&gt;a nice API&lt;/a&gt; which has been made digestible in a &lt;a href=&quot;https://code.google.com/p/python-lastfm/&quot;&gt;python-lastfm module&lt;/a&gt;. First I had to load them into Python which was slightly non-trivial as there are some odd names to deal with. The following code got most of them except for 79 artists which had birth/death dates which were incomplete.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;with open(filename) as f:
    for line in f:
        line_split = line.split(&amp;#39;,&amp;#39;)
        # this dirty code correctly splits unusual names (e.g. Jr.)
        if &amp;quot;Jr.&amp;quot; in line_split[1] or &amp;quot;Sr.&amp;quot; in line_split[1]:
            nametmp = line_split[0]+&amp;#39;&amp;#39;+line_split[1]
            inx = 1
        else:
            nametmp = line_split[0].replace(&amp;quot;(musician)&amp;quot;,&amp;quot;&amp;quot;)
            nametmp = line_split[0].replace(&amp;quot;(singer)&amp;quot;,&amp;quot;&amp;quot;)
            
        inx = 0

        byear = line_split[2+inx].replace(&amp;#39;&amp;quot;&amp;#39;,&amp;quot;&amp;quot;)
        dyear = line_split[3+inx].replace(&amp;#39;&amp;quot;&amp;#39;,&amp;quot;&amp;quot;)
        try:
            # datetime module only works with dates later than 1900 :(
            if int(dyear.split(&amp;#39;-&amp;#39;)[0]) &amp;gt; 1900 and int(dyear.split(&amp;#39;-&amp;#39;)[0]) &amp;gt; 1900:
                birthdate = datetime.strptime(byear,&amp;quot;%Y-%m-%d&amp;quot;)
                deathdate = datetime.strptime(dyear,&amp;quot;%Y-%m-%d&amp;quot;)
                lifespan = relativedelta(birthdate,deathdate).years

                # check they are not still alive
                if birthdate.year  == deathdate.year  or lifespan &amp;lt; 5:
                    print &amp;quot;STILL ALIVE!&amp;quot;, nametmp,lifespan
                elif birthdate.year != deathdate.year and lifespan &amp;gt; 7:
                    # now we are just dealing with the dead ones
                    lifespan = relativedelta(birthdate,deathdate).years
                    birthdates.append(birthdate)
                    deathdates.append(deathdate)
    
                    ages.append(lifespan)
                    birth.append(line_split[2+inx])
                    death.append(line_split[3+inx])

                    # I also checked month/day distributions for fun
                    deathday.append(deathdate.strftime(&amp;quot;%A&amp;quot;))
                    birthday.append(birthdate.strftime(&amp;quot;%A&amp;quot;))
                    deathmonth.append(deathdate.strftime(&amp;quot;%B&amp;quot;))
                    birthmonth.append(birthdate.strftime(&amp;quot;%B&amp;quot;))

                    artists.append(nametmp.strip(&amp;#39;&amp;quot;&amp;#39;))
                    genres.append(line_split[1+inx].strip(&amp;#39;&amp;quot;&amp;#39;))
                    
        except ValueError:
            print &amp;quot;VALUE ERROR&amp;quot;
            missed += 1&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I then built a dictionary over each genre I wanted to include. I&amp;#39;m absolutely certain there are better ways of doing this but I didn&amp;#39;t have time to try more intelligent methods (suggestions welcome).&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;# initialize dictionary
averageagelist = {&amp;#39;rock&amp;#39;:[],&amp;#39;jazz&amp;#39;:[],&amp;#39;folk&amp;#39;:[],&amp;#39;metal&amp;#39;:[],&amp;#39;blues&amp;#39;:[],&amp;#39;classical&amp;#39;:[],&amp;#39;pop&amp;#39;:[],&amp;#39;misc&amp;#39;:[]}
#... and other dictionaries to be used

for i in xrange(0,len(artists)):
    found = False
    # get list of genres a given artist belongs to
    catuselist = []
    for cat in categories:
        if cat in genres[i]:
            found = True
            catuselist.append(cat)

    if not found:
        catuselist = [&amp;#39;misc&amp;#39;]

    # update respective list in dictionary
    for shortname in catuselist:        
        averageagelist[shortname].append(ages[i])
        birthlist[shortname].append(birth[i])
        birthmonthlist[shortname].append(birthmonth[i])
        birthdaylist[shortname].append(birthday[i])
        deathlist[shortname].append(death[i])
        deathmonthlist[shortname].append(deathmonth[i])
        deathdaylist[shortname].append(deathday[i])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now all that remains is to connect each artist to Last.fm to get our final piece of data. I also had to feed in appropriate names which required a minor modification to their default names which come from DBpedia.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import lastfm
api_key=&amp;#39;insert-your-key-here&amp;#39;
api = lastfm.Api(api_key)

fmnotcount = 0
uniqueartists = list(set(artists))
f = open(&amp;#39;fmartistcount&amp;#39;,&amp;#39;w&amp;#39;)
for artist in uniqueartists:
    try:
        fmartist = api.get_artist(artist.split(&amp;#39;(&amp;#39;)[0])
        f.write(artist+&amp;#39;,&amp;#39;+str(fmartist.stats.playcount)+&amp;#39;,&amp;#39;+str(fmartist.top_tag)+&amp;#39;,&amp;#39;+fmartist.image[&amp;#39;large&amp;#39;]+&amp;#39;\n&amp;#39;)
        print artist.split(&amp;#39;(&amp;#39;)[0],&amp;quot;playcount&amp;quot;,fmartist.stats.playcount
    except:
        fmnotcount+=1
        print &amp;quot;- could not find:&amp;quot;,artist

f.close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we just need to plot the relevant dictionary.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;fig = plt.figure()
ax = fig.add_subplot(111)
ax.bar(*zip(*zip(count(), averageage.values())))
plt.xticks(*zip(*zip(count(0.4), averageage)))
plt.show()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Results&lt;/h2&gt;

&lt;h3&gt;Average Lifespan For Artists In Each Genre&lt;/h3&gt;

&lt;p&gt;Let&amp;#39;s just have a look at the life span for each genre with the associated standard deviation.&lt;/p&gt;

&lt;table style=&quot;font-size: 90%; text-align: center&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Genre&lt;/th&gt;&lt;th&gt;Sample&lt;/th&gt;&lt;th&gt;Median&lt;/th&gt;&lt;th&gt;Mean&lt;/th&gt;&lt;th&gt;STD&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;classical&lt;/td&gt;&lt;td&gt;76&lt;/td&gt;&lt;td&gt;71&lt;/td&gt;&lt;td&gt;68&lt;/td&gt;&lt;td&gt;19&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;jazz&lt;/td&gt;&lt;td&gt;268&lt;/td&gt;&lt;td&gt;67&lt;/td&gt;&lt;td&gt;65&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;blues&lt;/td&gt;&lt;td&gt;774&lt;/td&gt;&lt;td&gt;64&lt;/td&gt;&lt;td&gt;61&lt;/td&gt;&lt;td&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;pop&lt;/td&gt;&lt;td&gt;178&lt;/td&gt;&lt;td&gt;63&lt;/td&gt;&lt;td&gt;59&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;folk&lt;/td&gt;&lt;td&gt;20&lt;/td&gt;&lt;td&gt;53&lt;/td&gt;&lt;td&gt;53&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;rock&lt;/td&gt;&lt;td&gt;794&lt;/td&gt;&lt;td&gt;47&lt;/td&gt;&lt;td&gt;46&lt;/td&gt;&lt;td&gt;13&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;metal&lt;/td&gt;&lt;td&gt;196&lt;/td&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;39&lt;/td&gt;&lt;td&gt;9&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;misc&lt;/td&gt;&lt;td&gt;6190&lt;/td&gt;&lt;td&gt;61&lt;/td&gt;&lt;td&gt;59&lt;/td&gt;&lt;td&gt;18&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;

&lt;p&gt;Clearly the majority of the artists are in the &amp;#39;misc&amp;#39; or miscellaneous category. I don&amp;#39;t have the time to parse these into the appropriate category so what I present is only a sample dataset of the whole. Feel free to play with the dataset and improve on the classification mechanisms I employed. &lt;/p&gt;

&lt;p&gt;Interestingly, &lt;strong&gt;classical musicians live the longest&lt;/strong&gt; on average and &lt;strong&gt;metal musicians live the shortest&lt;/strong&gt; on average (the difference between a whopping 29 years longer!). Genres like jazz and blues also have longer life-spans compared to the more &amp;#39;labor intensive&amp;#39; rock and metal (which somewhat confirms the &lt;a href=&quot;http://youtu.be/LQ123T3zD2k&quot;&gt;&amp;quot;better to burn out than fade away&amp;quot;&lt;/a&gt; mantra). Conversely it seems the lifestyle of jazz and classical musicians lead to longer lives. It is important to note that there are only 20 folk musicians in this sample.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/all-lifespan-hist.png&quot; alt=&quot;Average Lifespan For All Genres&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/blues-lifespan-hist.png&quot; alt=&quot;Average Lifespan For Blues&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/classical-lifespan-hist.png&quot; alt=&quot;Average Lifespan For Classical&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/folk-lifespan-hist.png&quot; alt=&quot;Average Lifespan For Folk&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/jazz-lifespan-hist.png&quot; alt=&quot;Average Lifespan For Jazz&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/metal-lifespan-hist.png&quot; alt=&quot;Average Lifespan For Metal&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/pop-lifespan-hist.png&quot; alt=&quot;Average Lifespan For Pop&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/rock-lifespan-hist.png&quot; alt=&quot;Average Lifespan For Rock&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;h3&gt;Youngest and Oldest&lt;/h3&gt;

&lt;p&gt;Rank ordering the youngest and oldest musicians in the list we find:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TOP 5 YOUNGEST MUSICIANS
Ritchie Valens 17
Yukiko Okada 18
John Spence 18
Nick Traina 19
Yaki Kadafi 19&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;TOP 5 OLDEST MUSICIANS
Huey Long  105
Wade Mainer 104
Bill Tapia 103
Orlando Cole 101
Roman Totenberg 101&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I noticed some tragic names in the youngest list: John Spence was the front man for &lt;em&gt;No Doubt&lt;/em&gt; before he took his own life due to the pressure he put on himself. Yukiko Okada was a Japanese pop singer who also took her own life. Ritchie Valens also died tragically in a plane crash in 1959 with the Big Bopper, Buddy Holly and Roger Peterson (aka &lt;em&gt;the day the music died&lt;/em&gt;). Nick Traina, the lead singer for the punk band &lt;em&gt;Link 80&lt;/em&gt; also died of a self-induced morphine overdose. From the longer list of young artists I generated my own little play-list to see what these youngsters produced before they shuffled off this mortal coil.&lt;/p&gt;

&lt;h3&gt;27 club?&lt;/h3&gt;

&lt;p&gt;Using this data we can immediately answer the original question. If 27 was indeed a significant age, one of the histograms above should have shown this when clearly they don&amp;#39;t. When I do extract out all musicians who had a life span equal to 27 I get the following list of 34 names:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Rudy Lewis
Freaky Tah
D. Boon
Kurt Cobain
Janis Joplin
Valentín Elizalde
Fat Pat
Louis Chauvin
Leslie Harvey
Mia Zapata
Jim Morrison
Ron &amp;quot;Pigpen&amp;quot; McKernan
Rockin&amp;#39; Robin Roberts
Alan Wilson 
Chris Austin
Jeremy Michael Ward
Richey Edwards
Chris Bell 
Brian Jones
Seagram
Dave Alexander 
Bob Gordon
Kami 
André Pretorius 
Jacob Miller
Rodrigo 
Amy Winehouse
Doug Watkins
Amar Singh Chamkila
Pete Ham
Kristen Pfaff
Jimi Hendrix
Alexander Bashlachev
Robert Johnson&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we compare it to the &lt;a href=&quot;https://en.wikipedia.org/wiki/27_Club&quot;&gt;actual list on Wikipedia&lt;/a&gt; (which the data should reflect) we find most of the names in that list. The astute reader will note that there are 44 names on Wikipedia and this is in fact larger than what I get via DBpedia. One example is the not so successful rock and roll singer &lt;a href=&quot;https://en.wikipedia.org/wiki/Dickie_Pride&quot;&gt;Dickie Pride&lt;/a&gt; -- I checked my raw data and indeed, he does not exist. This is most likely because DBpedia hasn&amp;#39;t indexed his page yet (though the page has been &lt;a href=&quot;https://en.wikipedia.org/w/index.php?title=Dickie_Pride&amp;amp;dir=prev&amp;amp;action=history&quot;&gt;around since 2008&lt;/a&gt;). This highlights the fact that the data, whilst rich, is ultimately incomplete. In time, DBpedia will fill out most of these darker corners.&lt;/p&gt;

&lt;h3&gt;Popularity and Lifespan&lt;/h3&gt;

&lt;p&gt;I connected up the names to the Last.fm database and used the number of unique plays as a proxy for &lt;em&gt;popularity&lt;/em&gt;. Doing this for the matches it could find I generated a scatter plot of how popularity relates to lifespan. Note that the y-axis is log meaning it goes between 1 count on last.fm up to 1,000,000,000 (10^9).&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/lastfm-popularity-lifespan.png&quot; alt=&quot;last-fm popularity&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;Feeding this into scikits.statsmodels in Python we get a bunch of statistics about the regression.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;OLS Regression Results                            
==============================================================================
Dep. Variable:                      y   R-squared:                       0.005
Model:                            OLS   Adj. R-squared:                  0.005
Method:                 Least Squares   F-statistic:                     13.78
Date:                Fri, 28 Mar 2014   Prob (F-statistic):           0.000210
Time:                        01:40:22   Log-Likelihood:                -4270.3
No. Observations:                2557   AIC:                             8545.
Df Residuals:                    2555   BIC:                             8556.
Df Model:                           1                                         
==============================================================================
                 coef    std err          t      P&amp;gt;|t|      [95.0% Conf. Int.]
------------------------------------------------------------------------------
x1            -0.0052      0.001     -3.712      0.000        -0.008    -0.002
const          4.6365      0.088     52.401      0.000         4.463     4.810
==============================================================================
Omnibus:                       11.340   Durbin-Watson:                   1.929
Prob(Omnibus):                  0.003   Jarque-Bera (JB):               11.349
Skew:                          -0.161   Prob(JB):                      0.00343
Kurtosis:                       3.050   Cond. No.                         218.
==============================================================================&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There is a weak trend indicating that &lt;strong&gt;the more popular you are, the shorter your lifespan&lt;/strong&gt;. Does this line up with stereotypes about the hard and fast lifestyle of many musicians? Maybe.&lt;/p&gt;

&lt;h3&gt;Average Lifespan For Musicians Over The Last 50 Years&lt;/h3&gt;

&lt;p&gt;If we look at average lifespan for each genre broken up into bins of birth, we see how the average lifespan has changed over time for each genre.&lt;/p&gt;

&lt;p&gt;&lt;br/&gt;
&lt;img src=&quot;/assets/musicianmortality/year-lifespan.png&quot; alt=&quot;Average lifespan in each genre over time.&quot;&gt;
&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The data fluctuates quite a bit but the overall trend is upwards though still below the mean of the U.S. population average (dashed). It seems any way you cut it, musicians live shorter lives than the average population. Clearly the metal heads aren&amp;#39;t doing so well.&lt;/p&gt;

&lt;h2&gt;Findings&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;classical musicians live the longest on average&lt;/li&gt;
&lt;li&gt;metal musicians live the shortest on average&lt;/li&gt;
&lt;li&gt;all musicians seem to live shorter lives than average&lt;/li&gt;
&lt;li&gt;there is a small trend when comparing popularity to lifespan; the the more popular you are, the shorter your lifespan (highly speculative)&lt;/li&gt;
&lt;li&gt;there is no &amp;quot;27-club&amp;quot; when looking at the entire lifespans of the musicians in any genre (possible origins: romanticism)&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;Caveats&lt;/h2&gt;

&lt;h3&gt;Last.fm&lt;/h3&gt;

&lt;p&gt;Popularity is not just the &lt;em&gt;play counts&lt;/em&gt; on Last.fm. Things that are popular now are by no means how they were in the previous decades. Can you guess what song was at number 1 in 1969? The Beatles? James Brown? Beach Boys? It was &lt;em&gt;Archies - Sugar Sugar&lt;/em&gt;. Clearly this demonstrates &amp;#39;good music&amp;#39; now is not what was on everyone&amp;#39;s mind during the X0s. I don&amp;#39;t really have a way to measure popularity as a function of time via any other source so I just went with what I had. Please suggest other datasets which might help me out here.&lt;/p&gt;

&lt;h3&gt;Wikipedia&lt;/h3&gt;

&lt;p&gt;Wikipedia&amp;#39;s content is made by people like you and me. It has its own biases but I would think for this project they don&amp;#39;t really effect the dataset. With zero data to back me up, Wikipedia probably has 90% of all well known musicians in its database (lower limit). Since music is a relatively integral part of people&amp;#39;s lives, it stands to reason that the dataset is quite comprehensive and accurate (remember I&amp;#39;m only getting the birth/death dates here).&lt;/p&gt;

&lt;h3&gt;Transcription&lt;/h3&gt;

&lt;p&gt;Transcription errors could be introduced when trying to get the play count from Last.fm. I simply don&amp;#39;t have the time to check every single name being fed through the API. Strange names may not return a result and so if you find some people missing then feel free to improve my code. I&amp;#39;m also not sure how it deals with the fact that some artists belong to certain bands and may not have a solo career. This will undervalue their popularity on the whole if Last.fm doesn&amp;#39;t interpret it correctly. Also Last.fm may have only recently added certain artists and different artists get added at different times. Over sufficiently long time scales this would be washed out but who knows when each of the artists I&amp;#39;m using were added and so this must be taken into consideration.&lt;/p&gt;

&lt;h3&gt;Genre Inception Offset&lt;/h3&gt;

&lt;p&gt;Since classical music has been around much longer than say folk or metal, lifespans will be more accurate and will be with less selection bias. Metal music has been around since the early 1970s and so the maximum the lifespan of a deceased metal musician will be (~40 + maturation age, ~18?) ~58 years. Indeed this is what we see in the distribution of ages. The same goes for all of the other genres (folk slightly older and jazz slightly older still).
&lt;br&gt;
&lt;br&gt;
The overall message I want to convey is that you can test certain cultural sentiments using online data. This is obviously the tip of the iceberg so feel free to take what I have done and build on it - who knows what you might find out.&lt;/p&gt;
</description>
                <pubDate>Fri, 28 Mar 2014 00:00:00 -0400</pubDate>
                <link>http://brendangriffen.com/blog/music-and-mortality</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/music-and-mortality</guid>
            </item>
        
            <item>
                <title>Creating a GUI in Python</title>
                <description>&lt;p&gt;So you want to create a Graphical User Interface (GUI)? This tutorial/code might help getting you started. The first feeling I had when I decided to follow this path was &lt;em&gt;intimidation&lt;/em&gt;. With much patience and Googling I managed to create something I think will save me time in the future. I&amp;#39;ve used this tool countless times already, whether it be to improve my intuition of complex functions, speed up work flows or render dynamic data. The entire Pythonic GUI template I am about to introduce can be found at its own Github repository.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;div markdown=&quot;0&quot;&gt;&lt;a href=&quot;https://github.com/bgriffen/PythonGUITemplate&quot; class=&quot;btn&quot;&gt;Python GUI Github Repository&lt;/a&gt;&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;h2&gt;Where do I start?&lt;/h2&gt;

&lt;p&gt;Back in December of 2012, I wanted a tool which got me up and running relatively quickly without too much extra “fluff”. After some searching I found &lt;a href=&quot;https://github.com/enthought/traits&quot;&gt;Traits/TraitsUI&lt;/a&gt;. It seemed like a good option since it allowed me to integrate a bunch of other features I already used at the time (e.g. matplotlib for plotting and &lt;a href=&quot;http://mayavi.sourceforge.net/&quot;&gt;Mayavi&lt;/a&gt; for rendering) within one distribution. Enthought state it best.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;The TraitsUI package is a set of user interface tools designed to complement Traits. In the simplest case, it can automatically generate a user interface for editing a Traits-based object, with no additional coding on the part of the programmer-user. &lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Conveniently, all of the tools required to get you started (and then some) come with the &lt;a href=&quot;https://www.enthought.com/&quot;&gt;Enthought distribution&lt;/a&gt;. For more background on TraitsUI there is (as always) &lt;a href=&quot;https://www.youtube.com/watch?v=ohHoU4qvsNs&quot;&gt;a Youtube tutorial&lt;/a&gt;. First we need to install our required tools.&lt;/p&gt;

&lt;h2&gt;Requirements&lt;/h2&gt;

&lt;h4&gt;Installing EPD&lt;/h4&gt;

&lt;p&gt;Download the &lt;a href=&quot;https://www.enthought.com/&quot;&gt;Enthought distribution tools&lt;/a&gt; appropriate for your system. If you have an academic email then you can get it for free. Be sure to get the &lt;strong&gt;32-bit&lt;/strong&gt; (rh5) version as the 64-bit version does not contain Mayavi. If you&amp;#39;re on OSX then just get the .dmg image for OSX.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;bash epd-7.3-2-rh5-x86.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h4&gt;Getting the GUI template&lt;/h4&gt;

&lt;p&gt;If you want to cut to the chase you can &lt;a href=&quot;%22https://github.com/bgriffen/PythonGUITemplate%22&quot;&gt;clone the template from the respository&lt;/a&gt; and run in your terminal window:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;python main.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This should open up the template window with an empty canvas. Explore the code structure though there will be more on this later.&lt;/p&gt;

&lt;h2&gt;Googling &amp;quot;make a GUI using Traits in Python&amp;quot;&lt;/h2&gt;

&lt;p&gt;Much to my surprise, there are few examples of how to get started using TraitsUI. Sure you can build very small tool with a slide bar which changes one variable and re-plots it – but there is nothing which brings it all together: multiple tabs, plotting and 3D rendering. The &lt;a href=&quot;http://docs.enthought.com/traitsui/tutorials/traits_ui_scientific_app.html#the-gui-elements&quot;&gt;examples provided in the documentation&lt;/a&gt; are either too basic or too complex for my liking so I spent a few months trying to create something in between -- basically what I wished the Internet had 12 months ago. Back in December 2012, I was transitioning my core research language to Python which took only a short while as I came from MATLAB/FORTRAN/SQL-land. Eventually built &lt;a href=&quot;https://github.com/bgriffen/cme&quot;&gt;a few useful tools&lt;/a&gt; (well at least for me and my research group) with what I’m about to discuss.  Here is the most sophisticated example available in the documentation:
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/TraitsExample.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
Good start right? Whilst it does bring together the main ideas, it didn’t immediately give me a blank slate. It uses a bunch of Pythonic features which at the time I was not familiar with. The &lt;a href=&quot;http://docs.enthought.com/traitsui/tutorials/traits_ui_scientific_app.html#the-gui-elements&quot;&gt;documentation&lt;/a&gt; also didn’t incrementally build up to it (some basic tools then insta-migraine). I found myself back at the drawing board.&lt;/p&gt;

&lt;h2&gt;Introducing: &amp;quot;The Blank Slate&amp;quot;&lt;/h2&gt;

&lt;p&gt;To create the blank slate, I essentially had to take apart what was already available in the above example whilst being sure I didn’t remove any critical components of the application. This soon became tedious and I felt like I wasn’t learning anything new. There were also a number of features in the basic layout which were not included (e.g. 3D rendering). This was shortly remedied by finding out that Traits does &lt;a href=&quot;http://docs.enthought.com/mayavi/mayavi/auto/example_mayavi_traits_ui.html&quot;&gt;play nicely with Mayavi&lt;/a&gt;. Though my problem now became that of integration: these features existed independent from one another and I couldn’t find anywhere to put them all together (interactivity, plotting, 3D rendering). Eventually, after much head scratching I got it all working. I then stripped it down with the help of a colleague (&lt;a href=&quot;https://twitter.com/astrowizicist&quot;&gt;@astrowizicist&lt;/a&gt;) to create the following. I now use it as my default template to create new scientific applications.
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/PythonGUIEx1-1024x599.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/PythonGUIEx2-1024x598.png&quot; alt=&quot;Traits Example&quot;&gt;&lt;/p&gt;

&lt;h2&gt;Code Layout&lt;/h2&gt;

&lt;p&gt;Initially this was all constructed in one giant Python script but eventually it became unmanageable with all of the objects involved in my application so I broke it down into the following set of modules which can be &lt;a href=&quot;https://github.com/bgriffen/PythonGUITemplate&quot;&gt;found in the source&lt;/a&gt; (&lt;a href=&quot;http://git-scm.com/downloads&quot;&gt;install git&lt;/a&gt;, a version control system and clone the repository to get started). If you haven&amp;#39;t already &lt;a href=&quot;https://github.com/bgriffen/PythonGUITemplate&quot;&gt;downloaded the code&lt;/a&gt; I highly suggest you do so now so you are familiar with what I&amp;#39;m about to discuss.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;main.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This contains the master script which controls the application and integrates everything. Once you’ve installed the &lt;a href=&quot;https://support.enthought.com/entries/23407541-Getting-Started-with-EPD-on-OS-X&quot;&gt;Enthought Python Distribution tools&lt;/a&gt;, you can just run this from the command line &lt;code&gt;python main.py&lt;/code&gt; and it should launch.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;Common.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This contains all of the modules which are used globally across the application. You can import function specific modules deeper in the code to improve launch time if you like as well. &lt;code&gt;Common.py&lt;/code&gt; also constructs the matplotlib figure where you will be plotting (left panel). You’ll also find it imports a whole bunch of other things such as:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from enthought.traits.ui.api import View,UItem, Item, Group, Heading, \
Label, HSplit, Handler, CheckListEditor, EnumEditor, TableEditor, \
ListEditor, Tabbed, VGroup, HGroup, RangeEditor, Spring, spring&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All of these are just apart of the Traits API which you call to put in your GUI. You’ll see how these are used later. I’ve also added a bunch of other commonly used modules for scientific processing but you can remove these if you don’t need them.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;firstcalc.py
secondcalc.py&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;These are effectively the tabs on the right hand panel and the place where you will add your buttons, sliders, tables. They both contain a clone of (roughly) the same thing:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;class FirstCalc(HasTraits):
    view = View()
    def __init__(self, main, **kwargs):
        HasTraits.__init__(self)
        self.main = main&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Adding Some Basic Functionality&lt;/h2&gt;

&lt;p&gt;Say for instance you want to add a few of the typical buttons, directories etc. Traits has to offer. Your firstcalc.py simply becomes:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from Common import *
class FirstCalc(HasTraits):
    # Add Traits objects
    option = Bool(True)
    rangex = Range(1,10,5)
    yval = Float()
    listoptions = Enum([&amp;#39;Option 1&amp;#39;, &amp;#39;Option 2&amp;#39;,&amp;#39;Option 2&amp;#39;])
    stringopt = Str(&amp;quot;Default string which can also be empty.&amp;quot;)
    stringoptread = Str(&amp;quot;Default string which can also be empty [read-only version].&amp;quot;)
    masterpath = Directory(os.getcwd())
    button1 = Button(&amp;quot;Button 1 Name&amp;quot;)
    floatval = Float()
    changedcount = Int()
 
    #Construct the view
    view = View(
                Item(name=&amp;#39;rangex&amp;#39;,label=&amp;#39;X-Value&amp;#39;),
                Item(name=&amp;#39;yval&amp;#39;,style=&amp;#39;readonly&amp;#39;,label=&amp;#39;1/x&amp;#39;,format_str=&amp;#39;%.2e&amp;#39;),
                Item(name=&amp;#39;listoptions&amp;#39;,label=&amp;#39;list of options&amp;#39;),
                Item(name=&amp;#39;stringopt&amp;#39;),
                Item(name=&amp;#39;stringoptread&amp;#39;,style=&amp;#39;readonly&amp;#39;),
                Item(name=&amp;#39;masterpath&amp;#39;,label=&amp;#39;Directory&amp;#39;),
                Group(Item(name=&amp;#39;button1&amp;#39;,show_label=False)),
                Group(Item(name=&amp;#39;option&amp;#39;,label=&amp;#39;Boolean Option&amp;#39;)
                     ,enabled_when=&amp;#39;floatval &amp;lt; 0.5&amp;#39;,label=&amp;#39;Enabled Area Upon Random Value &amp;lt; 0.5&amp;#39;,show_border=True),
                Item(name=&amp;#39;changedcount&amp;#39;,style=&amp;#39;readonly&amp;#39;,label=&amp;#39;Attempts&amp;#39;),
                Item(name=&amp;#39;floatval&amp;#39;,label=&amp;#39;random generated&amp;#39;)
                )
 
    def _rangex_changed(self):
        self.yval = 1./self.rangex
 
    def _button1_fired(self):
        self.changedcount += 1
        self.floatval = random.random()
 
    def _floatval_changed(self):
        self.stringopt = &amp;quot;Hey, you changed the integer value!&amp;quot;
 
    def __init__(self, main, **kwargs):
        HasTraits.__init__(self&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So let’s see what we’ve added when we relaunch.
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/PythonGUIEx3-1024x599.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/PythonGUIEx4Zoom.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
Slide the X-value ruler we see the objects change accordingly.
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/PythonGUIEx5.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
Hopefully you can match up each of the objects with what is in the code. It is hard to convey the interactivity here but I can show a snapshot. Let’s change the slider and hit the button a few times.
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/PythonGUIEx6.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
As we can see from the code the output is simply 1/x which is updated in real-time. Also when I hit the button, a random number is generated. If that number is less than 0.5 then the enabled area becomes illuminated and we can access the objects within (i.e. the Boolean option).  This should give you a basic idea of how to add certain button. Now we want to plot something, say y = mx + c where x and c are dynamic. I added three objects needed:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;plotbutton = Button(&amp;quot;Plot Me!&amp;quot;)
yintcept = Range(0.0,5.,10.)
gradient = Range(0.0,5.0,10.)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;which is inserted into the View() object just like the other objects.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;Group(Item(name=&amp;#39;gradient&amp;#39;,label=&amp;#39;gradient&amp;#39;),
      Item(name=&amp;#39;yintcept&amp;#39;,label=&amp;#39;y-intercept&amp;#39;),
      Item(name=&amp;#39;plotbutton&amp;#39;,show_label=False),show_border=True,label=&amp;#39;Plotting Area&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We also need to add an action for when the plot button is fired.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def _plotbutton_fired(self):
    y = self.gradient * np.array(range(10)) + self.yintcept
    figure = self.main.display
    figure.clear()
    ax = figure.add_subplot(111)
    ax = self.main.display.axes[0]
    ax.plot(np.array(range(10)),y,color=self.main.markercolor,
            marker=self.main.markerstyle,
            markersize=self.main.markersize,
            markeredgewidth=0.0,
            linestyle=&amp;#39;-&amp;#39;)
    wx.CallAfter(self.main.display.canvas.draw)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/pythongui/PythonGUIEx7-1024x599.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
Also note how the marker style and marker size is “brought in” or inherited from main.py via self.main.xxx. It is hard to convey here (&lt;a href=&quot;https://github.com/bgriffen/PythonGUITemplate&quot;&gt;try it out!&lt;/a&gt;), but that now allows you to change the gradient and y-intercept dynamically and it updates on the plot in real-time. It is a much more intuitive (and faster) way to examine complex functions where it is unclear by looking at it how it will change using different inputs.&lt;/p&gt;

&lt;h2&gt;Adding Mayavi Functionality&lt;/h2&gt;

&lt;p&gt;To implement Mayavi functionality you simply add the following (or something similar which uses your underlying data) to a button function which runs when fired (as above). This will produce something like the next image in the left panel.  There is also some limited documentation here.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;def _mayavibutton_fired(self):
    self.main.scene.mlab.clf(figure=self.main.scene.mayavi_scene)
    x = np.array(data[&amp;#39;posX&amp;#39;])
    y = np.array(data[&amp;#39;posY&amp;#39;])
    z = np.array(data[&amp;#39;posZ&amp;#39;])
    vx = np.array(data[&amp;#39;pecVX&amp;#39;])
    vy = np.array(data[&amp;#39;pecVY&amp;#39;])
    vz = np.array(data[&amp;#39;pecVZ&amp;#39;])
    self.main.scene.mlab.quiver3d(x,y,z,vx,vy,vz)
    self.main.scene.mlab.xlabel(&amp;#39;x-pos&amp;#39;)
    self.main.scene.mlab.ylabel(&amp;#39;y-pos&amp;#39;)
    self.main.scene.mlab.zlabel(&amp;#39;z-pos&amp;#39;)
    self.main.scene.mlab.colorbar(title=&amp;#39;velocity [km/s]&amp;#39;)
    self.main.scene.mlab.show()
    self.main.scene.mlab.outline()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That’s the end of my “tutorial/demo” section. If you want to learn how to use the various other layout and object options I suggest taking a look at one of the tools I developed.&lt;/p&gt;

&lt;h2&gt;Example Project&lt;/h2&gt;

&lt;p&gt;The &lt;a href=&quot;http://caterpillar.scripts.mit.edu/www/&quot;&gt;Catepillar Project&lt;/a&gt; is one of my main research tasks at MIT which involves looking at several hundreds of simulations of a similar kind. Rather than building endless panels in Matplotlib and tediously plotting different marker types and colors to inspect the data I decided to automate it using the tools described. Thus was born &lt;a href=&quot;https://github.com/bgriffen/cme&quot;&gt;Caterpillar Made Easy&lt;/a&gt; which is one such tool which which allows you setup and run cosmological simulations on a large cluster, inspect the data dynamically in two and three dimensions. It is based on exactly the same template I have shown above (plus a few hundred hours of coding!). Here are a few screen shots of the sort of thing you can do in this environment. Perhaps you have a study you’re doing which might also benefit from such interactivity and automation. I haven&amp;#39;t &lt;em&gt;officially&lt;/em&gt; released it to the public but I might do so soon. This is just to give you an idea of the sort of things you can achieve.
&lt;center&gt;
&lt;div markdown=&quot;0&quot;&gt;&lt;a href=&quot;https://github.com/bgriffen/cme&quot; class=&quot;btn&quot;&gt;CME Repository&lt;/a&gt;&lt;/div&gt;
&lt;/center&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/inspectparams-1024x620.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/contaminationheatmap-1024x616.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/pythongui/velocityhaloinspection-1024x619.png&quot; alt=&quot;Traits Example&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
Head to the repository to see more screenshots. If there is a button, or particular feature you want, you can check through the source code to see how it is generated. Just check the &lt;code&gt;View()&lt;/code&gt; section which is usually near the top. The rest of the code is just calculations etc. which is specific to the problems I am trying to solve. If you have questions about how to get started, please leave a comment below or if it is more technical in nature, drop me a line via email. Good luck and remember if you are new to this kind of thing: &lt;em&gt;be patient&lt;/em&gt; -- good things will come.&lt;/p&gt;
</description>
                <pubDate>Wed, 26 Feb 2014 00:00:00 -0500</pubDate>
                <link>http://brendangriffen.com/blog/creating-a-GUI-in-Python</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/creating-a-GUI-in-Python</guid>
            </item>
        
            <item>
                <title>Scraping Wikipedia: Common Misconceptions</title>
                <description>&lt;p&gt;I recently stumbled upon this &lt;a href=&quot;https://en.wikipedia.org/wiki/List_of_common_misconceptions&quot;&gt;list of common misconceptions on Wikipedia&lt;/a&gt; which contains a wide range of interesting tidbits. For instance, did you know Napoleon was taller than average for a Frenchman and that Vikings did not wear helmets with horns? There are a great number of little factoids and I wondered if I could not just scrape the first sentence to get the core facts of the article. I ended up writing a ~20 line Python script which uses the very useful Pattern suite to strip down the Wikipedia article into its basic content and output the first sentence. This work can also be found on Github. There are a few minor parsing errors but it turned out OK. Extremely basic, but fun.&lt;/p&gt;

&lt;p&gt;&lt;center&gt;
&lt;div markdown=&quot;0&quot;&gt;&lt;a href=&quot;https://github.com/bgriffen/wikipedia/tree/master/wikimisconceptions&quot; class=&quot;btn&quot;&gt;Github Repository&lt;/a&gt;&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import os, sys; sys.path.insert(0, os.path.join(&amp;quot;..&amp;quot;, &amp;quot;..&amp;quot;))
from pattern.web import Wikipedia
engine = Wikipedia(language=&amp;quot;en&amp;quot;)
article = engine.search(&amp;quot;list of common misconceptions&amp;quot;, cached=True, timeout=30)
f = open(&amp;quot;wikimisconceptions.txt&amp;quot;,&amp;#39;w&amp;#39;)
for s in article.sections:
    f.write(&amp;quot;\n&amp;quot;)&amp;lt;br title=&amp;quot;s.title.upper()&amp;lt;br&amp;quot; /&amp;gt;    f.write(title.encode(&amp;quot;utf8&amp;quot;)+&amp;quot;\n&amp;quot;)
    print &amp;quot;&amp;quot;
    print title
    facts = s.content.split(&amp;quot;*&amp;quot;)
    num = -1
    for fact in facts:
         num += 1
         if &amp;quot;See also&amp;quot; not in fact \
         and &amp;quot;Further information&amp;quot; not in fact \
         and &amp;quot;Main articles&amp;quot; not in fact and fact != &amp;quot;&amp;quot;:
             line = str(num) + &amp;quot;.&amp;quot; + fact.split(&amp;quot;.&amp;quot;)&amp;quot;.&amp;quot;
             print line
             f.write(line.encode(&amp;quot;utf8&amp;quot;)+&amp;quot;\n&amp;quot;)
f.close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This results in the following output:&lt;/p&gt;

&lt;h4&gt;ANCIENT TO MODERN HISTORY&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Vomiting was not a regular part of Roman dining customs.&lt;/li&gt;
&lt;li&gt;It is true that life expectancy in the Middle Ages and earlier was low; however, one should not infer that people usually died around the age of 30.&lt;/li&gt;
&lt;li&gt;There is no evidence that Vikings wore horns on their helmets.&lt;/li&gt;
&lt;li&gt;King Canute did not command the tide to reverse in a fit of delusional arrogance.&lt;/li&gt;
&lt;li&gt;There is no evidence that iron maidens were invented in the Middle Ages or even used for torture.&lt;/li&gt;
&lt;li&gt;The plate armor of European soldiers did not stop soldiers from moving around or necessitate a crane to get them into a saddle.&lt;/li&gt;
&lt;li&gt;Modern historians dispute the popular misconception that the chastity belt, a device designed to prevent women from having sexual intercourse, was invented in medieval times.&lt;/li&gt;
&lt;li&gt;Medieval Europeans did not believe Earth was flat; in fact, from the time of the ancient Greek philosophers Plato and Aristotle on, belief in a spherical Earth remained almost universal among European intellectuals.&lt;/li&gt;
&lt;li&gt;Columbus never reached any land that now forms part of the mainland United States of America; most of the landings Columbus made on his four voyages, including the initial October 12, 1492 landing (the anniversary of which forms the basis of Columbus Day), were in the Caribbean Islands.&lt;/li&gt;
&lt;li&gt;There is a legend that Marco Polo imported pasta from China which originated with the Macaroni Journal, published by an association of food industries with the goal of promoting the use of pasta in the United States.&lt;/li&gt;
&lt;li&gt;Contrary to the popular image of the Pilgrim Fathers, the early settlers of the Plymouth Colony did not wear all black, and their capotains (hats) were shorter and rounder than the widely depicted tall hat with a buckle on it.&lt;/li&gt;
&lt;li&gt;The accused at the Salem witch trials were not burned at the stake, they either died in prison or were hanged.&lt;/li&gt;
&lt;li&gt;Marie Antoinette did not say “let them eat cake” when she heard that the French peasantry were starving due to a shortage of bread.&lt;/li&gt;
&lt;li&gt;George Washington did not have wooden teeth.&lt;/li&gt;
&lt;li&gt;The signing of the United States Declaration of Independence did not occur on July 4, 1776.&lt;/li&gt;
&lt;li&gt;Benjamin Franklin did not propose that the wild turkey be used as the symbol for the United States instead of the bald eagle.&lt;/li&gt;
&lt;li&gt;There was never a bill to make German the official language of the United States that was defeated by one vote in the House of Representatives, nor has one been proposed at the state level.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;MODERN HISTORY&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Napoleon Bonaparte was not short; rather he was slightly taller than the average Frenchman of his time.&lt;/li&gt;
&lt;li&gt;Cinco de Mayo is not Mexico’s Independence Day, but the celebration of the Mexican Army’s victory over the French in the Battle of Puebla on May 5, 1862.&lt;/li&gt;
&lt;li&gt;The Great Chicago Fire of 1871 was not caused by Mrs.&lt;/li&gt;
&lt;li&gt;The claim that Frederick Remington, on assignment to Cuba, telegraphed William Randolph Hearst that “.&lt;/li&gt;
&lt;li&gt;The popular image of Santa Claus was not created by The Coca-Cola Company as an advertising gimmick; by the time Coca-Cola began using Santa Claus’s image in the 1930s, Santa Claus had already taken his modern form in popular culture, having already seen extensive use in other companies’ advertisements and other mass media.&lt;/li&gt;
&lt;li&gt;Italian dictator Benito Mussolini did not “make the trains run on time”.&lt;/li&gt;
&lt;li&gt;There was no widespread outbreak of panic across the United States in response to Orson Welles’ 1938 radio adaptation of H.&lt;/li&gt;
&lt;li&gt;There is no evidence of Polish cavalry mounting a brave but futile charge against German tanks using lances and sabres during the German invasion of Poland in 1939.&lt;/li&gt;
&lt;li&gt;During the occupation of Denmark by the Nazis during World War II, King Christian X of Denmark did not thwart Nazi attempts to identify Jews by wearing a yellow star himself.&lt;/li&gt;
&lt;li&gt;Albert Einstein did not fail mathematics in school.&lt;/li&gt;
&lt;li&gt;Actor Ronald Reagan was never seriously considered for the role of Rick Blaine in the 1942 film classic Casablanca, eventually played by Humphrey Bogart.&lt;/li&gt;
&lt;li&gt;Eva Perón never uttered the quote “I will return and I will be millions”.&lt;/li&gt;
&lt;li&gt;The Rolling Stones were not performing “Sympathy for the Devil” at the 1969 Altamont Free Concert when Meredith Hunter was stabbed to death by a member of the local Hells Angels chapter that was serving as security.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;LEGISLATION AND CRIME&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;It is rarely necessary to wait 24 hours before filing a missing person’s report; in instances where there is evidence of violence or of an unusual absence, law enforcement agencies in the United States often stress the importance of beginning an investigation promptly.&lt;/li&gt;
&lt;li&gt;Entrapment law in the United States does not require police officers to identify themselves as police in the case of a sting or other undercover work.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;FOOD AND COOKING&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Searing meat does not “seal in” moisture, and in fact may actually cause meat to lose moisture.&lt;/li&gt;
&lt;li&gt;Some people believe that food items cooked with wine or liquor will be totally non-alcoholic, because alcohol’s low boiling point causes it to evaporate quickly when heated.&lt;/li&gt;
&lt;li&gt;Monosodium glutamate (MSG) has a widespread reputation for triggering migraine headache exacerbations, but there are no consistent data to support this relationship.&lt;/li&gt;
&lt;li&gt;Sushi does not mean “raw fish”, and not all sushi includes raw fish.&lt;/li&gt;
&lt;li&gt;Microwave ovens do not cook food from the inside out.&lt;/li&gt;
&lt;li&gt;Placing metal inside a microwave oven does not damage the oven’s electronics.&lt;/li&gt;
&lt;li&gt;The functional principle of a microwave oven is not related to the resonance frequencies of water, and microwave ovens can therefore operate at many different frequencies.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;The Twinkie does not have an infinite shelf life; its listed shelf life is approximately 45 days (25 in its original formulation) and generally remains on a store shelf for only 7 to 10 days.&lt;br&gt;&lt;/li&gt;
&lt;li&gt;Fortune cookies, despite being associated with Chinese cuisine in the United States, were in fact invented and brought to the U.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;WORDS AND PHRASES&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Non-standard, slang or colloquial terms used by English speakers are sometimes alleged not to be real words.&lt;/li&gt;
&lt;li&gt;The word “fuck” did not originate in Christianized Anglo-Saxon England (7th century CE) as an acronym for “Fornication Under Consent of King”; nor did it originate as an acronym for “For Unlawful Carnal Knowledge”, either as a sign posted above adulterers in the stocks, or as a criminal charge against members of the British Armed Forces; nor did it originate during the 15th-century Battle of Agincourt as a corruption of “pluck yew” (an idiom falsely attributed to the English for drawing a longbow).&lt;/li&gt;
&lt;li&gt;The word “crap” did not originate as a back-formation of British plumber Thomas Crapper’s surname, nor does his name originate from the word “crap”, although the surname may have helped popularize the word.&lt;/li&gt;
&lt;li&gt;The expression “rule of thumb” did not originate from a law allowing a man to beat his wife with a stick no thicker than his thumb, and there is no evidence that such a law ever existed.&lt;/li&gt;
&lt;li&gt;“Golf” did not originate as an acronym of “Gentlemen Only, Ladies Forbidden”.&lt;/li&gt;
&lt;li&gt;The word “gringo” did not originate during the Mexican-American War (1846–1848), the Venezuelan War of Independence (1811–1823), the Mexican Revolution (1910–1920), or in the American Old West (c.&lt;/li&gt;
&lt;li&gt;“420″ did not originate as the Los Angeles police or penal code for marijuana use.&lt;/li&gt;
&lt;li&gt;The word “the” was never pronounced or spelled “ye” in Old or Middle English.&lt;/li&gt;
&lt;li&gt;“Xmas” did not originate as a secular plan to “take the Christ out of Christmas”.&lt;/li&gt;
&lt;li&gt;Although the expression “the enemy of my enemy is my friend” is often described as an Arabic proverb, there is no evidence of such an origin.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;ASTRONOMY&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;It is commonly claimed that the Great Wall of China is the only human-made object visible from the Moon.&lt;/li&gt;
&lt;li&gt;Black holes, contrary to their common image, have the same gravitational effects as any other equal mass in their place.&lt;/li&gt;
&lt;li&gt;Meteorites are not necessarily hot when they reach the Earth.&lt;/li&gt;
&lt;li&gt;When a meteor or spacecraft enters the atmosphere, the heat of entry is not (primarily) caused by friction, but by adiabatic compression of air in front of the object.&lt;/li&gt;
&lt;li&gt;Egg balancing is possible on every day of the year, not just the vernal equinox, and there is no evidence of a relationship between astronomical phenomena and the ability to balance an egg.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;VERTEBRATES&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Older elephants that are near death do not leave their herd and instinctively direct themselves toward a specific location known as an elephants’ graveyard to die.&lt;/li&gt;
&lt;li&gt;Bulls are not enraged by the color red, used in capes by professional matadors.&lt;/li&gt;
&lt;li&gt;Lemmings do not engage in mass suicidal dives off cliffs when migrating.&lt;/li&gt;
&lt;li&gt;Bats are not blind.&lt;/li&gt;
&lt;li&gt;Ostriches do not hide their heads in the sand to hide from enemies.&lt;/li&gt;
&lt;li&gt;It is not harmful to baby birds to pick them up and return them to their nests, despite the common belief that doing so will cause the mother to reject them.&lt;/li&gt;
&lt;li&gt;A duck’s quack actually does echo, although the echo may be difficult to hear for humans under some circumstances.&lt;/li&gt;
&lt;li&gt;The notion that goldfish have a memory span of just a few seconds is false.&lt;/li&gt;
&lt;li&gt;Sharks can actually suffer from cancer.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;INVERTEBRATES&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;It is a common misconception that an earthworm becomes two worms when cut in half.&lt;/li&gt;
&lt;li&gt;Houseflies do not have an average lifespan of 24 hours.&lt;/li&gt;
&lt;li&gt;According to urban legend, the daddy longlegs spider (Pholcus phalangioides) is the most venomous spider in the world, but the shape of their mandibles leaves them unable to bite humans, rendering them harmless to our species.&lt;/li&gt;
&lt;li&gt;The flight mechanism and aerodynamics of the bumblebee (as well as other insects) are actually quite well understood, in spite of the urban legend that calculations show that they should not be able to fly.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;PLANTS&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Poinsettias are not highly toxic to humans or cats.&lt;/li&gt;
&lt;li&gt;Flowering sunflowers do not track the Sun across the sky.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;EVOLUTION&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;The word theory in the theory of evolution does not imply mainstream scientific doubt regarding its validity; the concepts of theory and hypothesis have specific meanings in a scientific context.&lt;/li&gt;
&lt;li&gt;Evolution does not attempt to explain the origin of life or the origin and development of the universe.&lt;/li&gt;
&lt;li&gt;Humans did not evolve from either of the living species of chimpanzees.&lt;/li&gt;
&lt;li&gt;Evolution is not a progression from inferior to superior organisms, and it also does not necessarily result in an increase in complexity.&lt;/li&gt;
&lt;li&gt;Evolution does not “plan” to improve an organism’s fitness to survive.&lt;/li&gt;
&lt;li&gt;Humans and (non-avian) dinosaurs did not coexist.&lt;/li&gt;
&lt;li&gt;Dinosaurs did not become extinct due to being generally maladapted or unable to cope with normal climatic change, a view found in many older textbooks.&lt;/li&gt;
&lt;li&gt;Mammals did not evolve from any modern group of reptiles.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;HUMAN BODY AND HEALTH&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Waking sleepwalkers does not harm them.&lt;/li&gt;
&lt;li&gt;In South Korea, it is commonly and incorrectly believed that sleeping in a closed room with an electric fan running can be fatal.&lt;/li&gt;
&lt;li&gt;Eating less than an hour before swimming does not increase the risk of experiencing muscle cramps or drowning.&lt;/li&gt;
&lt;li&gt;Drowning is often thought to be a violent struggle, where the victim waves and calls for help.&lt;/li&gt;
&lt;li&gt;It is a common misconception that hydrogen peroxide is a disinfectant or antiseptic for treating wounds.&lt;/li&gt;
&lt;li&gt;Human blood in veins is not actually blue.&lt;/li&gt;
&lt;li&gt;Exposure to a vacuum, or experiencing uncontrolled decompression, does not cause the body to explode, or internal fluids to boil.&lt;/li&gt;
&lt;li&gt;Antibiotics do not cure the common cold, because it is caused by a virus infection against which antibiotics are useless.&lt;/li&gt;
&lt;li&gt;A person doesn’t become resistant to certain antibiotics.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;SENSES&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;All different tastes can be detected on all parts of the tongue by taste buds, with slightly increased sensitivities in different locations depending on the person, contrary to the popular belief that specific tastes only correspond to specific mapped sites on the tongue.&lt;/li&gt;
&lt;li&gt;Humans have more than the commonly cited five senses.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;SKIN AND HAIR&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Water-induced wrinkles are not caused by the skin absorbing water and swelling.&lt;/li&gt;
&lt;li&gt;Shaving does not cause terminal hair to grow back thicker or coarser or darker.&lt;/li&gt;
&lt;li&gt;Hair and fingernails do not continue to grow after a person dies.&lt;/li&gt;
&lt;li&gt;Hair care products cannot actually “repair” split ends and damaged hair.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;NUTRITION, FOOD, AND DRINK&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Eight glasses or two to three liters of water a day are not needed to maintain health.&lt;/li&gt;
&lt;li&gt;Sugar does not cause hyperactivity in children.&lt;/li&gt;
&lt;li&gt;Alcoholic beverages do not make one warmer.&lt;/li&gt;
&lt;li&gt;Alcohol does not necessarily kill brain cells.&lt;/li&gt;
&lt;li&gt;A vegetarian or vegan diet can provide enough protein for adequate nutrition.&lt;/li&gt;
&lt;li&gt;Swallowed chewing gum does not take seven years to digest.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;HUMAN SEXUALITY&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;There is no physiological basis for the belief that having sex in the days leading up to a sporting event or contest is detrimental to performance.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;BRAIN&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Mental abilities are not absolutely separated into the left and right cerebral hemispheres of the brain.&lt;/li&gt;
&lt;li&gt;Until recently, medical experts believed that humans were born with all of the brain cells they would ever have.&lt;/li&gt;
&lt;li&gt;Vaccines do not cause autism or autism spectrum disorders.&lt;/li&gt;
&lt;li&gt;People do not use only ten percent of their brains.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;DISEASE&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Drinking milk or consuming other dairy products does not increase mucus production.&lt;/li&gt;
&lt;li&gt;Humans cannot catch warts from toads or other animals; the bumps on a toad are not warts.&lt;/li&gt;
&lt;li&gt;Neither cracking one’s knuckles nor exercising while in good health causes osteoarthritis.&lt;/li&gt;
&lt;li&gt;Eating nuts, popcorn, or seeds does not increase the risk of diverticulitis.&lt;/li&gt;
&lt;li&gt;The Trendelenburg position (lying on the back with the feet elevated) for treating hypotension or shock is not supported by evidence and may in fact be harmful.&lt;/li&gt;
&lt;li&gt;Stress plays a relatively minor role in hypertension – contrary to common belief.&lt;/li&gt;
&lt;li&gt;In those with the common cold the color of the sputum or nasal secretion may vary from clear to yellow to green and does not indicate the class of agent causing the infection.&lt;/li&gt;
&lt;li&gt;In general, Vitamin C does not prevent the common cold, although it may have a protective effect during intense cold-weather exercise and may slightly reduce the duration of colds.&lt;/li&gt;
&lt;li&gt;In people with eczema, bathing does not dry the skin and may in fact be beneficial.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;MATERIALS SCIENCE&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Glass does not flow at room temperature as a high-viscosity liquid.&lt;/li&gt;
&lt;li&gt;Most diamonds are not formed from highly compressed coal.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;MATHEMATICS&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;When an event with equally probable outcomes comes out the same way several times in succession, the other outcome is not more likely next time.&lt;/li&gt;
&lt;li&gt;There is no evidence that the ancient Greeks designed the Parthenon to deliberately match the golden ratio.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;PHYSICS&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;It is not true that air takes the same time to travel above and below an aircraft’s wing.&lt;/li&gt;
&lt;li&gt;Blowing over a curved piece of paper does not demonstrate Bernoulli’s principle.&lt;/li&gt;
&lt;li&gt;The Coriolis effect does not determine the direction that water rotates in a bathtub drain or a flushing toilet, so this direction is not influenced by location.&lt;/li&gt;
&lt;li&gt;Gyroscopic forces or geometric trail are not required for a rider to balance a bicycle or for it to demonstrate self-stability.&lt;/li&gt;
&lt;li&gt;The idea that lightning never strikes the same place twice is one of the oldest and most well-known superstitions about lightning.&lt;/li&gt;
&lt;li&gt;A penny dropped from the Empire State Building will not kill a person or crack the sidewalk.&lt;/li&gt;
&lt;li&gt;When the ambient temperature is low, temporarily decreasing the temperature setting on a building’s programmable thermostat.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;PSYCHOLOGY&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;There is no scientific evidence for the existence of “photographic” or eidetic memory (the ability to remember images with so high a precision as to mimic a camera).&lt;/li&gt;
&lt;li&gt;Schizophrenia is not the same thing as dissociative identity disorder, namely split or multiple personalities.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;SPORTS&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Abner Doubleday did not invent baseball.&lt;/li&gt;
&lt;li&gt;The black belt in martial arts does not necessarily indicate expert level or mastery.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;HEBREW BIBLE&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;The forbidden fruit mentioned in the Book of Genesis is commonly assumed to be an apple, and is widely depicted as such in Western art.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;BUDDHISM&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;The historical Buddha was not obese.&lt;/li&gt;
&lt;li&gt;The Buddha is not a god.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;CHRISTIANITY&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;There is no evidence that Jesus was born on December 25.&lt;/li&gt;
&lt;li&gt;Nowhere in the Bible does it say exactly three magi came to visit the baby Jesus, nor that they were kings, rode on camels, or that their names were Casper, Melchior and Balthazar.&lt;/li&gt;
&lt;li&gt;The Immaculate Conception is not synonymous with the virgin birth of Jesus, nor is it a supposed belief in the virgin birth of Mary, his mother.&lt;/li&gt;
&lt;li&gt;The idea that Mary Magdalene was a prostitute before meeting Jesus is not found anywhere in the Bible.&lt;/li&gt;
&lt;li&gt;Roman Catholic dogma does not say that the pope is either sinless or always infallible.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;ISLAM&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;A fatwā is a non-binding legal opinion issued by an Islamic scholar under Islamic law.&lt;/li&gt;
&lt;li&gt;The word “jihad” does not always mean “holy war”; literally, the word in Arabic means “struggle”.&lt;/li&gt;
&lt;li&gt;The Quran does not promise martyrs 72 virgins in heaven.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;LITERATURE&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Frankenstein was not the name of the monster in the novel Frankenstein; or, The Modern Prometheus by Mary Shelley; rather it was the surname of the monster’s creator, Victor Frankenstein.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;MUSIC&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;“Edelweiss” is not the national anthem of Austria, but is in fact an original composition created for the musical The Sound of Music.&lt;/li&gt;
&lt;li&gt;“Twinkle Twinkle Little Star” was not composed by Wolfgang Amadeus Mozart when he was 5 years old; he only composed variations on the tune, which originated from a French folk song, and only at the age of 25 or 26.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;INVENTIONS&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;George Washington Carver did not invent peanut butter, though he reputedly discovered three hundred uses for peanuts and hundreds more for soybeans, pecans, and sweet potatoes.&lt;/li&gt;
&lt;li&gt;Thomas Crapper did not invent the flush toilet; flushing toilets were first used in the Indus Valley Civilization, around the 26th century BCE.&lt;/li&gt;
&lt;li&gt;Thomas Edison did not invent the light bulb.&lt;/li&gt;
&lt;li&gt;Henry Ford did not invent either the automobile or the assembly line.&lt;/li&gt;
&lt;li&gt;Guglielmo Marconi did not invent the radio, but only modernized it for public broadcasting and communication.&lt;/li&gt;
&lt;li&gt;Al Gore never said that he “invented” the Internet, although Gore did say, “During my service in the United States Congress, I took the initiative in creating the Internet.&lt;/li&gt;
&lt;li&gt;James Watt did not invent the steam engine, nor were his ideas on steam engine power inspired by a kettle lid pressured open by steam.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;COMPUTING&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Computers running Mac OS X are not immune to malware such as trojan horses, although malware for this operating system is significantly less common.&lt;/li&gt;
&lt;/ol&gt;

&lt;h4&gt;TRANSPORTATION&lt;/h4&gt;

&lt;ol&gt;
&lt;li&gt;Toilet waste is never intentionally jettisoned from an aircraft.&lt;/li&gt;
&lt;li&gt;Automotive batteries stored on a concrete floor do not discharge any faster than they would on other surfaces, in spite of worry among Americans that concrete harms batteries.&lt;/li&gt;
&lt;/ol&gt;
</description>
                <pubDate>Tue, 11 Feb 2014 00:00:00 -0500</pubDate>
                <link>http://brendangriffen.com/blog/common-misconceptions</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/common-misconceptions</guid>
            </item>
        
            <item>
                <title>Graphs of Wikipedia: Programming Languages</title>
                <description>&lt;p&gt;A while back I posted about &lt;a href=&quot;http://brendangriffen.com/gow-influential-thinkers/&quot;&gt;a graph of the personalities on Wikipedia&lt;/a&gt;. This time I wanted to see which programming languages were linked to one another by user-entered “Influenced” and “Influenced-by” information. Take for instance the functional language Haskell:&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;IMG SRC=&quot;=/assets/wikipedia/Haskell-Programming-Wiki.png&quot; ALT=&quot;Haskell Entry&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;
In the infobox on the side we find a large list of languages Haskell is connected to in one way or another. &lt;a href=&quot;https://en.wikipedia.org/wiki/Haskell_(programming_language)#Related_languages&quot;&gt;Wikipedia devotes an entire section&lt;/a&gt; to how it is related to other programming languages for those interested.&lt;/p&gt;

&lt;div style=&quot;text-align: center;&quot;&gt;
&lt;IMG SRC=&quot;=/assets/wikipedia/Haskell-Programming-Wiki-Zoom.png&quot; ALT=&quot;Haskell Zoom&quot;&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br/&gt;
It must be emphasized that the links are user-generated and any such comparison is largely subjective in nature (especially when comparing concepts rather than syntax). The following query &lt;a href=&quot;http://dbpedia.org/snorql/&quot;&gt;executed here&lt;/a&gt; provided me with the bulk of the data:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT *
WHERE { ?p a &amp;lt;http://dbpedia.org/ontology/ProgrammingLanguage&amp;gt; .
?p &amp;lt;http://dbpedia.org/ontology/influenced&amp;gt; ?influenced . }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The output was then decoded using a &lt;a href=&quot;http://meyerweb.com/eric/tools/dencoder/&quot;&gt;nifty URL decoder&lt;/a&gt;. It was then fed through &lt;a href=&quot;https://github.com/bgriffen/griffsgraphs/blob/master/programminglanguages/proglanguages.py&quot;&gt;a Python script&lt;/a&gt; to arrange it in a format most suitable for Gephi. The graph below represents the connections between all programming languages in Wikipedia. A force algorithm was applied such that closer nodes are more strongly connected in nature. The size of the node indicates how many connections that language has to the others in the network. The colors are achieved by carrying out a modularity algorithm applied by Gephi to highlight subnetworks. The curvature of outgoing edges is clockwise indicating influence direction. Lisp for example has many clockwise edges going out and only few counter-clockwise coming in. I can see some relations in the languages I am familiar with but perhaps you notice a few things that are flat out wrong? Please let me know in the comments as I’d be interested in hearing your thoughts. The raw Gephi graph data (.dl, .dfg, .gephi, .dexf, .gml etc.) can be &lt;a href=&quot;http://brendangriffen.com/data/programminglanguage-data.zip&quot;&gt;found here&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;full&quot;&gt;
    &lt;a href=&quot;=/assets/wikipedia/programminglanguages-label.png&quot; title=&quot;Directional&quot;&gt;&lt;img src=&quot;=/assets/wikipedia/programminglanguages-label.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt; 

&lt;figure class=&quot;full&quot;&gt;
    &lt;a href=&quot;=/assets/wikipedia/programminglanguagesarrows-label.png&quot; title=&quot;Arrow Based&quot;&gt;&lt;img src=&quot;=/assets/wikipedia/programminglanguagesarrows-label.png&quot;&gt;&lt;/a&gt;
&lt;/figure&gt; 

&lt;p&gt;As one might expect all of the major players are the biggest nodes. C, Haskell, Lisp, Python and Java all feature prominently. Anything strange you notice? Let me know in the comments. I really must commend the designers on their nomenclature. See if you can find one of the more humorous languages by zooming in. I also obtained the designer of each language and connected the people together based on the programming languages they were involved with. This was obtained by the following query:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-sql&quot; data-lang=&quot;sql&quot;&gt;SELECT *
WHERE {?p a &amp;lt;http://dbpedia.org/ontology/ProgrammingLanguage&amp;gt; .
?p &amp;lt;http://dbpedia.org/ontology/designer&amp;gt; ?designer . }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Large nodes do not represent more influential people but simply the people whose work spawned the most number of languages in the subsequent years. As expected, it is a very homogeneous playing field as many people were involved in multiple languages and at times had many collaborators. It must be stressed that the dataset is incomplete and was the result of my somewhat rudimentary way of parsing the data. Without a doubt, things could be improved. I’ve setup &lt;a href=&quot;https://github.com/bgriffen/griffsgraphs&quot;&gt;a GitHub repository&lt;/a&gt; for all (Gephi) graph files and images for those interested. Feel free to embed or share the above images. Lastly, please keep in mind where this data is coming from: contributors of Wikipedia. Whilst they are a studious bunch, they aren’t without faults so take up any problems with the graph with the pages themselves as that is all this represents.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Update!&lt;/strong&gt; Since posting there has been some great feedback found on the web. Of particular interest is &lt;a href=&quot;http://oreilly.com/news/graphics/prog_lang_poster.pdf&quot;&gt;this PDF&lt;/a&gt; of the history of programming languages and &lt;a href=&quot;http://exploringdata.github.io/vis/programming-languages-influence-network/&quot;&gt;this fantastic interactive version&lt;/a&gt; of what I was trying to present by &lt;a href=&quot;https://twitter.com/yaph&quot;&gt;Ramiro Gomez&lt;/a&gt;. I think it really is time to move to &lt;a href=&quot;http://d3js.org/&quot;&gt;D3.js&lt;/a&gt; and &lt;a href=&quot;http://sigmajs.org/&quot;&gt;sigma.js&lt;/a&gt;.&lt;/p&gt;
</description>
                <pubDate>Sun, 19 Jan 2014 00:00:00 -0500</pubDate>
                <link>http://brendangriffen.com/blog/gow-programming-languages</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/gow-programming-languages</guid>
            </item>
        
            <item>
                <title>Basic Interactive Currency Map With jQuery + Python</title>
                <description>&lt;p&gt;The good people over at &lt;a href=&quot;http://jqvmap.com/&quot;&gt;jQuery Vector Maps&lt;/a&gt; have a nice little package for making interactive maps. I wanted to go beyond the standard vector map of countries. All it requires is a connection to a currency conversion module and some “find and replace” code. The most time consuming aspect was finding the correct python module which connected to an online currency exchange. I have added the code to a GitHub repository so fee free to improve upon it (&lt;a href=&quot;https://github.com/bgriffen/jcurrency/blob/master/code/constructmap.py&quot;&gt;core code&lt;/a&gt;).  It is quite poorly coded as I have never actually dealt with json data before and so I had to invoke sed and subprocesses to do some tasks which can most definitely done more cleanly. I welcome constructive criticisms and suggestions.
&lt;center&gt;
&lt;div markdown=&quot;0&quot;&gt;&lt;a href=&quot;https://github.com/bgriffen/jcurrency&quot; class=&quot;btn&quot;&gt;jQuery Map Repository&lt;/a&gt;&lt;/div&gt;
&lt;/center&gt;&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;import json
import sys
from translate import Translator
import subprocess
import pycountry as pyc
import json, urllib2
import converter

selectcurrency = &amp;quot;USD&amp;quot;

countryISO = [u&amp;#39;gw&amp;#39;,u&amp;#39;gt&amp;#39;, u&amp;#39;gr&amp;#39;, u&amp;#39;gq&amp;#39;, u&amp;#39;gy&amp;#39;, u&amp;#39;gf&amp;#39;, u&amp;#39;ge&amp;#39;, u&amp;#39;gd&amp;#39;, u&amp;#39;gb&amp;#39;,  \ 
u&amp;#39;ga&amp;#39;, u&amp;#39;gn&amp;#39;, u&amp;#39;gm&amp;#39;, u&amp;#39;gl&amp;#39;, u&amp;#39;gh&amp;#39;, u&amp;#39;tz&amp;#39;, u&amp;#39;lc&amp;#39;, u&amp;#39;la&amp;#39;, u&amp;#39;tw&amp;#39;, u&amp;#39;tt&amp;#39;, u&amp;#39;tr&amp;#39;, \
u&amp;#39;lk&amp;#39;, u&amp;#39;tn&amp;#39;, u&amp;#39;tl&amp;#39;, u&amp;#39;tm&amp;#39;, u&amp;#39;lr&amp;#39;, u&amp;#39;ls&amp;#39;, u&amp;#39;th&amp;#39;, u&amp;#39;tg&amp;#39;, u&amp;#39;td&amp;#39;, u&amp;#39;ly&amp;#39;, u&amp;#39;do&amp;#39;, \
u&amp;#39;dm&amp;#39;, u&amp;#39;dj&amp;#39;, u&amp;#39;dk&amp;#39;, u&amp;#39;de&amp;#39;, u&amp;#39;ye&amp;#39;, u&amp;#39;dz&amp;#39;, u&amp;#39;uy&amp;#39;, u&amp;#39;qa&amp;#39;, u&amp;#39;zm&amp;#39;, u&amp;#39;ee&amp;#39;, u&amp;#39;eg&amp;#39;, \
u&amp;#39;za&amp;#39;, u&amp;#39;ec&amp;#39;, u&amp;#39;mk&amp;#39;, u&amp;#39;et&amp;#39;, u&amp;#39;zw&amp;#39;, u&amp;#39;es&amp;#39;, u&amp;#39;er&amp;#39;, u&amp;#39;ru&amp;#39;, u&amp;#39;rw&amp;#39;, u&amp;#39;rs&amp;#39;, u&amp;#39;re&amp;#39;, \
u&amp;#39;ro&amp;#39;, u&amp;#39;bd&amp;#39;, u&amp;#39;be&amp;#39;, u&amp;#39;bf&amp;#39;, u&amp;#39;bg&amp;#39;, u&amp;#39;ba&amp;#39;, u&amp;#39;bb&amp;#39;, u&amp;#39;bn&amp;#39;, u&amp;#39;bo&amp;#39;, u&amp;#39;jp&amp;#39;, u&amp;#39;bi&amp;#39;, \
u&amp;#39;bj&amp;#39;, u&amp;#39;bt&amp;#39;, u&amp;#39;jm&amp;#39;, u&amp;#39;bw&amp;#39;, u&amp;#39;br&amp;#39;, u&amp;#39;bs&amp;#39;, u&amp;#39;lb&amp;#39;, u&amp;#39;by&amp;#39;, u&amp;#39;bz&amp;#39;, u&amp;#39;om&amp;#39;, u&amp;#39;ua&amp;#39;, \
u&amp;#39;jo&amp;#39;, u&amp;#39;ci&amp;#39;, u&amp;#39;ch&amp;#39;, u&amp;#39;co&amp;#39;, u&amp;#39;cn&amp;#39;,u&amp;#39;cm&amp;#39;, u&amp;#39;cl&amp;#39;, u&amp;#39;al&amp;#39;, u&amp;#39;ca&amp;#39;, u&amp;#39;cg&amp;#39;, u&amp;#39;cf&amp;#39;,  \
u&amp;#39;cd&amp;#39;, u&amp;#39;cz&amp;#39;, u&amp;#39;cy&amp;#39;, u&amp;#39;cr&amp;#39;, u&amp;#39;cv&amp;#39;, u&amp;#39;cu&amp;#39;, u&amp;#39;lv&amp;#39;, u&amp;#39;pt&amp;#39;, u&amp;#39;py&amp;#39;, u&amp;#39;lt&amp;#39;, u&amp;#39;pa&amp;#39;, \
u&amp;#39;pf&amp;#39;, u&amp;#39;pg&amp;#39;, u&amp;#39;pe&amp;#39;, u&amp;#39;tj&amp;#39;, u&amp;#39;ph&amp;#39;, u&amp;#39;pl&amp;#39;, u&amp;#39;hr&amp;#39;, u&amp;#39;ht&amp;#39;, u&amp;#39;hu&amp;#39;, u&amp;#39;hn&amp;#39;, u&amp;#39;vn&amp;#39;, \
u&amp;#39;pk&amp;#39;, u&amp;#39;md&amp;#39;, u&amp;#39;mg&amp;#39;, u&amp;#39;ma&amp;#39;, u&amp;#39;uz&amp;#39;, u&amp;#39;mm&amp;#39;, u&amp;#39;ml&amp;#39;, u&amp;#39;mn&amp;#39;, u&amp;#39;us&amp;#39;, u&amp;#39;mu&amp;#39;, u&amp;#39;mt&amp;#39;, \
u&amp;#39;mw&amp;#39;, u&amp;#39;mv&amp;#39;, u&amp;#39;mr&amp;#39;, u&amp;#39;ug&amp;#39;, u&amp;#39;my&amp;#39;, u&amp;#39;mx&amp;#39;, u&amp;#39;mz&amp;#39;, u&amp;#39;ae&amp;#39;, u&amp;#39;ve&amp;#39;, u&amp;#39;ag&amp;#39;, u&amp;#39;af&amp;#39;, \
u&amp;#39;iq&amp;#39;, u&amp;#39;is&amp;#39;, u&amp;#39;ir&amp;#39;, u&amp;#39;am&amp;#39;, u&amp;#39;it&amp;#39;, u&amp;#39;ao&amp;#39;, u&amp;#39;sv&amp;#39;, u&amp;#39;ar&amp;#39;, u&amp;#39;au&amp;#39;, u&amp;#39;vu&amp;#39;, u&amp;#39;in&amp;#39;, \
u&amp;#39;az&amp;#39;, u&amp;#39;ie&amp;#39;, u&amp;#39;id&amp;#39;, u&amp;#39;ni&amp;#39;, u&amp;#39;nl&amp;#39;, u&amp;#39;no&amp;#39;, u&amp;#39;il&amp;#39;, u&amp;#39;na&amp;#39;, u&amp;#39;nc&amp;#39;, u&amp;#39;ne&amp;#39;, u&amp;#39;ng&amp;#39;, \
u&amp;#39;nz&amp;#39;, u&amp;#39;np&amp;#39;, u&amp;#39;kw&amp;#39;, u&amp;#39;fr&amp;#39;, u&amp;#39;kz&amp;#39;, u&amp;#39;fi&amp;#39;, u&amp;#39;fj&amp;#39;, u&amp;#39;fk&amp;#39;, u&amp;#39;sz&amp;#39;, u&amp;#39;sy&amp;#39;, u&amp;#39;kg&amp;#39;, \
u&amp;#39;ke&amp;#39;, u&amp;#39;sr&amp;#39;, u&amp;#39;kh&amp;#39;, u&amp;#39;kn&amp;#39;, u&amp;#39;km&amp;#39;, u&amp;#39;st&amp;#39;, u&amp;#39;sk&amp;#39;, u&amp;#39;kr&amp;#39;, u&amp;#39;si&amp;#39;, u&amp;#39;kp&amp;#39;, u&amp;#39;so&amp;#39;, \
u&amp;#39;sn&amp;#39;, u&amp;#39;sl&amp;#39;, u&amp;#39;sc&amp;#39;, u&amp;#39;sb&amp;#39;, u&amp;#39;sa&amp;#39;, u&amp;#39;at&amp;#39;, u&amp;#39;se&amp;#39;, u&amp;#39;sd&amp;#39;]

countries = [u&amp;#39;Guinea-Bissau&amp;#39;, u&amp;#39;Guatemala&amp;#39;, u&amp;#39;Greece&amp;#39;, u&amp;#39;Equatorial Guinea&amp;#39;, \
u&amp;#39;Guyana&amp;#39;, u&amp;#39;French Guiana&amp;#39;, u&amp;#39;Georgia&amp;#39;, u&amp;#39;Grenada&amp;#39;, u&amp;#39;United Kingdom&amp;#39;, u&amp;#39;Gabon&amp;#39;, \
u&amp;#39;Guinea&amp;#39;, u&amp;#39;Gambia&amp;#39;, u&amp;#39;Greenland&amp;#39;, u&amp;#39;Ghana&amp;#39;, u&amp;#39;Tanzania&amp;#39;, u&amp;#39;Saint Lucia&amp;#39;, \
u&amp;quot;Lao People&amp;#39;s Democratic Republic&amp;quot;, u&amp;#39;Taiwan&amp;#39;, u&amp;#39;Trinidad and Tobago&amp;#39;, u&amp;#39;Turkey&amp;#39;, \
u&amp;#39;Sri Lanka&amp;#39;, u&amp;#39;Tunisia&amp;#39;, u&amp;#39;Timor-Leste&amp;#39;, u&amp;#39;Turkmenistan&amp;#39;, u&amp;#39;Liberia&amp;#39;, u&amp;#39;Lesotho&amp;#39;, \
u&amp;#39;Thailand&amp;#39;, u&amp;#39;Togo&amp;#39;, u&amp;#39;Chad&amp;#39;, u&amp;#39;Libya&amp;#39;, u&amp;#39;Dominican Republic&amp;#39;, u&amp;#39;Dominica&amp;#39;, \
u&amp;#39;Djibouti&amp;#39;, u&amp;#39;Denmark&amp;#39;, u&amp;#39;Germany&amp;#39;, u&amp;#39;Yemen&amp;#39;, u&amp;#39;Algeria&amp;#39;, u&amp;#39;Uruguay&amp;#39;, u&amp;#39;Qatar&amp;#39;, \
u&amp;#39;Zambia&amp;#39;, u&amp;#39;Estonia&amp;#39;, u&amp;#39;Egypt&amp;#39;, u&amp;#39;South Africa&amp;#39;, u&amp;#39;Ecuador&amp;#39;, u&amp;#39;Macedonia&amp;#39;, u&amp;#39;Ethiopia&amp;#39;, \
u&amp;#39;Zimbabwe&amp;#39;, u&amp;#39;Spain&amp;#39;, u&amp;#39;Eritrea&amp;#39;, u&amp;#39;Russian Federation&amp;#39;, u&amp;#39;Rwanda&amp;#39;, u&amp;#39;Serbia&amp;#39;, \
u&amp;#39;Reunion&amp;#39;, u&amp;#39;Romania&amp;#39;, u&amp;#39;Bangladesh&amp;#39;, u&amp;#39;Belgium&amp;#39;, u&amp;#39;Burkina Faso&amp;#39;, u&amp;#39;Bulgaria&amp;#39;, \
u&amp;#39;Bosnia and Herzegovina&amp;#39;, u&amp;#39;Barbados&amp;#39;, u&amp;#39;Brunei Darussalam&amp;#39;, u&amp;#39;Bolivia&amp;#39;, u&amp;#39;Japan&amp;#39;, \
u&amp;#39;Burundi&amp;#39;, u&amp;#39;Benin&amp;#39;, u&amp;#39;Bhutan&amp;#39;, u&amp;#39;Jamaica&amp;#39;, u&amp;#39;Botswana&amp;#39;, u&amp;#39;Brazil&amp;#39;, u&amp;#39;Bahamas&amp;#39;, \
u&amp;#39;Lebanon&amp;#39;, u&amp;#39;Belarus&amp;#39;, u&amp;#39;Belize&amp;#39;, u&amp;#39;Oman&amp;#39;, u&amp;#39;Ukraine&amp;#39;, u&amp;#39;Jordan&amp;#39;, u&amp;quot;Cote d&amp;#39;Ivoire&amp;quot;, \
u&amp;#39;Switzerland&amp;#39;, u&amp;#39;Colombia&amp;#39;, u&amp;#39;China&amp;#39;, u&amp;#39;Cameroon&amp;#39;, u&amp;#39;Chile&amp;#39;, u&amp;#39;Albania&amp;#39;, u&amp;#39;Canada&amp;#39;, \
u&amp;#39;Congo&amp;#39;, u&amp;#39;Central African Republic&amp;#39;, u&amp;#39;Congo&amp;#39;, u&amp;#39;Czech Republic&amp;#39;, u&amp;#39;Cyprus&amp;#39;, \
u&amp;#39;Costa Rica&amp;#39;, u&amp;#39;Cape Verde&amp;#39;, u&amp;#39;Cuba&amp;#39;, u&amp;#39;Latvia&amp;#39;, u&amp;#39;Portugal&amp;#39;, u&amp;#39;Paraguay&amp;#39;, \
u&amp;#39;Lithuania&amp;#39;, u&amp;#39;Panama&amp;#39;, u&amp;#39;French Polynesia&amp;#39;, u&amp;#39;Papua New Guinea&amp;#39;, u&amp;#39;Peru&amp;#39;, \
u&amp;#39;Tajikistan&amp;#39;, u&amp;#39;Philippines&amp;#39;, u&amp;#39;Poland&amp;#39;, u&amp;#39;Croatia&amp;#39;, u&amp;#39;Haiti&amp;#39;, u&amp;#39;Hungary&amp;#39;, \
u&amp;#39;Honduras&amp;#39;, u&amp;#39;Vietnam&amp;#39;, u&amp;#39;Pakistan&amp;#39;, u&amp;#39;Moldova&amp;#39;, u&amp;#39;Madagascar&amp;#39;, u&amp;#39;Morocco&amp;#39;, \
u&amp;#39;Uzbekistan&amp;#39;, u&amp;#39;Myanmar&amp;#39;, u&amp;#39;Mali&amp;#39;, u&amp;#39;Mongolia&amp;#39;, u&amp;#39;United States of America&amp;#39;, \
u&amp;#39;Mauritius&amp;#39;, u&amp;#39;Malta&amp;#39;, u&amp;#39;Malawi&amp;#39;, u&amp;#39;Maldives&amp;#39;, u&amp;#39;Mauritania&amp;#39;, u&amp;#39;Uganda&amp;#39;, \
u&amp;#39;Malaysia&amp;#39;, u&amp;#39;Mexico&amp;#39;, u&amp;#39;Mozambique&amp;#39;, u&amp;#39;United Arab Emirates&amp;#39;, u&amp;#39;Venezuela&amp;#39;, \
u&amp;#39;Antigua and Barbuda&amp;#39;, u&amp;#39;Afghanistan&amp;#39;, u&amp;#39;Iraq&amp;#39;, u&amp;#39;Iceland&amp;#39;, u&amp;#39;Iran&amp;#39;, u&amp;#39;Armenia&amp;#39;, \
u&amp;#39;Italy&amp;#39;, u&amp;#39;Angola&amp;#39;, u&amp;#39;El Salvador&amp;#39;, u&amp;#39;Argentina&amp;#39;, u&amp;#39;Australia&amp;#39;, u&amp;#39;Vanuatu&amp;#39;, \
u&amp;#39;India&amp;#39;, u&amp;#39;Azerbaijan&amp;#39;, u&amp;#39;Ireland&amp;#39;, u&amp;#39;Indonesia&amp;#39;, u&amp;#39;Nicaragua&amp;#39;, u&amp;#39;Netherlands&amp;#39;, \
u&amp;#39;Norway&amp;#39;, u&amp;#39;Israel&amp;#39;, u&amp;#39;Namibia&amp;#39;, u&amp;#39;New Caledonia&amp;#39;, u&amp;#39;Niger&amp;#39;, u&amp;#39;Nigeria&amp;#39;, u&amp;#39;New Zealand&amp;#39;, \
u&amp;#39;Nepal&amp;#39;, u&amp;#39;Kuwait&amp;#39;, u&amp;#39;France&amp;#39;, u&amp;#39;Kazakhstan&amp;#39;, u&amp;#39;Finland&amp;#39;, u&amp;#39;Fiji&amp;#39;, \u&amp;#39;Falkland Islands&amp;#39;, \
u&amp;#39;Swaziland&amp;#39;, u&amp;#39;Syrian Arab Republic&amp;#39;, u&amp;#39;Kyrgyz Republic&amp;#39;, u&amp;#39;Kenya&amp;#39;, u&amp;#39;Suriname&amp;#39;, \
u&amp;#39;Cambodia&amp;#39;, u&amp;#39;Saint Kitts and Nevis&amp;#39;, u&amp;#39;Comoros&amp;#39;, u&amp;#39;Sao Tome and Principe&amp;#39;, u&amp;#39;Slovakia&amp;#39;, \
u&amp;#39;South Korea&amp;#39;, u&amp;#39;Slovenia&amp;#39;, u&amp;#39;North Korea&amp;#39;, u&amp;#39;Somalia&amp;#39;, u&amp;#39;Senegal&amp;#39;, u&amp;#39;Sierra Leone&amp;#39;, \
u&amp;#39;Seychelles&amp;#39;, u&amp;#39;Solomon Islands&amp;#39;, u&amp;#39;Saudi Arabia&amp;#39;, u&amp;#39;Austria&amp;#39;, u&amp;#39;Sweden&amp;#39;, u&amp;#39;Sudan&amp;#39;]

currencies = [&amp;#39;XOF&amp;#39;,&amp;#39;CTQ&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;XAF&amp;#39;,&amp;#39;GYD&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;GEL&amp;#39;,&amp;#39;XCD&amp;#39;,&amp;#39;GBP&amp;#39;,&amp;#39;XAF&amp;#39;,&amp;#39;GNF&amp;#39;,&amp;#39;GMD&amp;#39;,&amp;#39;DKK&amp;#39;, \
&amp;#39;GHS&amp;#39;,&amp;#39;TZS&amp;#39;,&amp;#39;XCD&amp;#39;,&amp;#39;LAK&amp;#39;,&amp;#39;TWD&amp;#39;,&amp;#39;TTD&amp;#39;,&amp;#39;TRY&amp;#39;,&amp;#39;LKR&amp;#39;,&amp;#39;TND&amp;#39;,&amp;#39;USD&amp;#39;,&amp;#39;TMT&amp;#39;,&amp;#39;LRD&amp;#39;,&amp;#39;LSL&amp;#39;,&amp;#39;THB&amp;#39;,&amp;#39;THB&amp;#39;,&amp;#39;XAF&amp;#39;, \
&amp;#39;XOF&amp;#39;,&amp;#39;DOP&amp;#39;,&amp;#39;XCD&amp;#39;,&amp;#39;DJF&amp;#39;,&amp;#39;DKK&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;YER&amp;#39;,&amp;#39;DZD&amp;#39;,&amp;#39;UYU&amp;#39;,&amp;#39;QAR&amp;#39;,&amp;#39;ZMW&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;EGP&amp;#39;,&amp;#39;ZAR&amp;#39;,&amp;#39;USD&amp;#39;,&amp;#39;MKD&amp;#39;, \
&amp;#39;ETB&amp;#39;,&amp;#39;ZWL&amp;#39;,&amp;#39;RUB&amp;#39;,&amp;#39;ERN&amp;#39;,&amp;#39;RUB&amp;#39;,&amp;#39;RWF&amp;#39;,&amp;#39;RSD&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;RON&amp;#39;,&amp;#39;BDT&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;XOF&amp;#39;,&amp;#39;BGN&amp;#39;,&amp;#39;BAM&amp;#39;,&amp;#39;BBD&amp;#39;,&amp;#39;BND&amp;#39;, \
&amp;#39;BOB&amp;#39;,&amp;#39;JPY&amp;#39;,&amp;#39;BIF&amp;#39;,&amp;#39;XOF&amp;#39;,&amp;#39;BTN&amp;#39;,&amp;#39;JMD&amp;#39;,&amp;#39;BWP&amp;#39;,&amp;#39;BRL&amp;#39;,&amp;#39;BSD&amp;#39;,&amp;#39;LBP&amp;#39;,&amp;#39;BYR&amp;#39;,&amp;#39;BZR&amp;#39;,&amp;#39;OMR&amp;#39;,&amp;#39;UAH&amp;#39;,&amp;#39;JOD&amp;#39;,&amp;#39;XOF&amp;#39;, \
&amp;#39;CHF&amp;#39;,&amp;#39;COP&amp;#39;,&amp;#39;CNY&amp;#39;,&amp;#39;XAF&amp;#39;,&amp;#39;CLP&amp;#39;,&amp;#39;ALL&amp;#39;,&amp;#39;CAD&amp;#39;,&amp;#39;CDF&amp;#39;,&amp;#39;XAF&amp;#39;,&amp;#39;CDF&amp;#39;,&amp;#39;CZK&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;CRC&amp;#39;,&amp;#39;CVE&amp;#39;,&amp;#39;CUP&amp;#39;,&amp;#39;LVL&amp;#39;, \
&amp;#39;EUR&amp;#39;,&amp;#39;PYG&amp;#39;,&amp;#39;LTL&amp;#39;,&amp;#39;PAB&amp;#39;,&amp;#39;XPF&amp;#39;,&amp;#39;PGK&amp;#39;,&amp;#39;PEN&amp;#39;,&amp;#39;TJS&amp;#39;,&amp;#39;PHP&amp;#39;,&amp;#39;PLN&amp;#39;,&amp;#39;HRK&amp;#39;,&amp;#39;HTG&amp;#39;,&amp;#39;HUF&amp;#39;,&amp;#39;HNL&amp;#39;,&amp;#39;VND&amp;#39;,&amp;#39;PKR&amp;#39;, \
&amp;#39;MDL&amp;#39;,&amp;#39;MGA&amp;#39;,&amp;#39;MAD&amp;#39;,&amp;#39;UZS&amp;#39;,&amp;#39;MMK&amp;#39;,&amp;#39;XOF&amp;#39;,&amp;#39;MNT&amp;#39;,&amp;#39;USD&amp;#39;,&amp;#39;MUR&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;MWK&amp;#39;,&amp;#39;MVR&amp;#39;,&amp;#39;MRO&amp;#39;,&amp;#39;UGX&amp;#39;,&amp;#39;MYR&amp;#39;,&amp;#39;MXN&amp;#39;, \
&amp;#39;MZN&amp;#39;,&amp;#39;AED&amp;#39;,&amp;#39;VEF&amp;#39;,&amp;#39;XCD&amp;#39;,&amp;#39;AFN&amp;#39;,&amp;#39;UQD&amp;#39;,&amp;#39;ISK&amp;#39;,&amp;#39;IRR&amp;#39;,&amp;#39;AMD&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;AOA&amp;#39;,&amp;#39;SVC&amp;#39;,&amp;#39;ARS&amp;#39;,&amp;#39;AUD&amp;#39;,&amp;#39;VUV&amp;#39;,&amp;#39;INR&amp;#39;, \
&amp;#39;AZN&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;IDR&amp;#39;,&amp;#39;NIO&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;ILS&amp;#39;,&amp;#39;NAD&amp;#39;,&amp;#39;XPF&amp;#39;,&amp;#39;XOF&amp;#39;,&amp;#39;NGN&amp;#39;,&amp;#39;NZD&amp;#39;,&amp;#39;NPR&amp;#39;,&amp;#39;KWD&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;KZT&amp;#39;, \
&amp;#39;EUR&amp;#39;,&amp;#39;FJD&amp;#39;,&amp;#39;FKP&amp;#39;,&amp;#39;SZL&amp;#39;,&amp;#39;SYP&amp;#39;,&amp;#39;KGS&amp;#39;,&amp;#39;KES&amp;#39;,&amp;#39;SRD&amp;#39;,&amp;#39;KHR&amp;#39;,&amp;#39;XCD&amp;#39;,&amp;#39;KMF&amp;#39;,&amp;#39;STD&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;KRW&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;KPW&amp;#39;,&amp;#39;\
SOS&amp;#39;,&amp;#39;XOF&amp;#39;,&amp;#39;SLL&amp;#39;,&amp;#39;SCR&amp;#39;,&amp;#39;SBD&amp;#39;,&amp;#39;SAR&amp;#39;,&amp;#39;EUR&amp;#39;,&amp;#39;SEK&amp;#39;,&amp;#39;SDG&amp;#39;]


filename = &amp;quot;jquery.vmap.sampledata.js&amp;quot;
f = open(filename,&amp;#39;w&amp;#39;)
f.write(&amp;quot;var sample_data = {&amp;quot;)

cpcmd = &amp;quot;cp template.js oldfile.js&amp;quot;
subprocess.call(&amp;#39;;&amp;#39;.join([cpcmd]), shell=True)
for i in xrange(0,len(countryISO)):
    countrydecode = countryISO[i].encode(&amp;#39;UTF-8&amp;#39;).upper()
    currencyname = currencies[i]
    
    countryencoded = pyc.countries.get(alpha2=countrydecode)
    decodedcountry = countryencoded.name.encode(&amp;#39;utf-8&amp;#39;)
    shortcountryname = decodedcountry.split(&amp;#39;,&amp;#39;)

    for country in countries:
        if shortcountryname[0] == country.encode(&amp;#39;utf-8&amp;#39;):
            if currencyname != selectcurrency:
                c = converter.convert(from_curr=selectcurrency,to_curr=currencyname)
                newname = shortcountryname[0] + &amp;quot;: &amp;quot; + c + &amp;quot; &amp;quot; + currencyname
                print &amp;quot;--------------------&amp;quot;
                print str(countryISO[i]) + &amp;quot;: &amp;quot; + shortcountryname[0]
                print &amp;quot;Exchange rate: &amp;quot; + c
                if &amp;quot;Lao People&amp;#39;s Democratic Republic&amp;quot; ==  shortcountryname[0]:
                    shortcountryname[0] = &amp;quot;Laos&amp;quot;

            elif currencyname == selectcurrency:
                newname = shortcountryname[0] + &amp;quot;: 1 &amp;quot; + selectcurrency
            
            cp_files = &amp;quot;sed -e &amp;#39;s/&amp;quot; + shortcountryname[0] + &amp;quot;/&amp;quot; + newname + \
                            &amp;quot;/g&amp;#39; oldfile.js &amp;gt; newfile.js&amp;quot;
            mv_files = &amp;quot;mv newfile.js oldfile.js&amp;quot;
            subprocess.call(&amp;#39;;&amp;#39;.join([cp_files,mvfiles]), shell=True)
            if i != len(countryISO):
                datastr = &amp;#39;&amp;quot;&amp;#39; + countryISO[i] + &amp;#39;&amp;quot;:&amp;quot;&amp;#39; + c + &amp;#39;&amp;quot;,&amp;#39;
            elif i == len(countryISO)-1:
                datastr = &amp;#39;&amp;quot;&amp;#39; + countryISO[i] + &amp;#39;&amp;quot;:&amp;quot;&amp;#39; + c + &amp;#39;&amp;quot;&amp;#39;
            f.write(datastr)

f.write(&amp;quot;}&amp;quot;)
f.close()
mving = &amp;#39;cp oldfile.js jquery.vmap.world.js&amp;#39;
subprocess.call(&amp;#39;;&amp;#39;.join([mving]), shell=True)
print &amp;quot;conversion complete!&amp;quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h2&gt;Interactive Map&lt;/h2&gt;

&lt;p&gt;&lt;object width=&quot;800&quot; height=&quot;500&quot; classid=&quot;clsid:d27cdb6e-ae6d-11cf-96b8-444553540000&quot; codebase=&quot;http://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0&quot;&gt;&lt;param name=&quot;src&quot; value=&quot;http://bgriffen.scripts.mit.edu/www/data/currencymap/world.html&quot; /&gt;&lt;embed width=&quot;800&quot; height=&quot;500&quot; type=&quot;application/x-shockwave-flash&quot; src=&quot;http://bgriffen.scripts.mit.edu/www/data/currencymap/world.html&quot; /&gt;&lt;/object&gt;&lt;/p&gt;

&lt;p&gt;This could further be expanded to make it able to take user input and scale the colors to be country GDP, population etc. Though I’m sure many maps of this kind already exist, I’ve found it a nice way to learn a new programming language.&lt;/p&gt;
</description>
                <pubDate>Tue, 05 Nov 2013 00:00:00 -0500</pubDate>
                <link>http://brendangriffen.com/blog/jQuery-currency-map</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/jQuery-currency-map</guid>
            </item>
        
            <item>
                <title>Top 100 Astronomers By Citation</title>
                <description>&lt;figure class=&quot;full&quot;&gt;
    &lt;a href=&quot;/assets/astronomers-940x390.jpg&quot; title=&quot;How many do you know?&quot;&gt;&lt;img src=&quot;/assets/astronomers-940x390.jpg&quot;&gt;&lt;/a&gt;
&lt;/figure&gt;  

&lt;p&gt;&lt;br/&gt;
How many of the faces above do you recognise? For a long time, I’ve wanted to investigate the the “who’s who” of astronomy via the literature but haven’t had the means. I’ve teamed up with &lt;a href=&quot;http://astrowizici.st/&quot;&gt;Andy Casey&lt;/a&gt; who has written a neat &lt;a href=&quot;https://github.com/andycasey/ads-python&quot;&gt;ADS-python&lt;/a&gt; module to access the &lt;a href=&quot;http://adsabs.harvard.edu/abstract_service.html&quot;&gt;ADS publication database&lt;/a&gt;. It is still early days at the moment so we’ve mainly been brainstorming but we figured we should start with the basics: most cited astronomers. There will be more posts to follow as we have more ideas under construction.&lt;/p&gt;

&lt;p&gt;For this exercise I just needed the raw list of names and citation count. If you aren’t familiar with the citation system, I suggest you head &lt;a href=&quot;https://en.wikipedia.org/wiki/Citation&quot;&gt;here&lt;/a&gt;. To make it a bit more interesting I’ve piped my results through Google images and used some face recognition code to extract out the astronomer profiles. The &lt;a href=&quot;https://github.com/andycasey/ads-python/blob/master/examples/top-cited-astronomers.py&quot;&gt;initial script&lt;/a&gt; to get the list was constructed by Andy and I added some extra features (i.e. face recognition and downloading images from Google). I also wrote some code which scrapes meta-information from websites in which the astronomer appears to get more information than ADS provides. I’ll discuss this more in future posts.&lt;/p&gt;

&lt;p&gt;If you clone the initial script and simply add the following snippet, it will search Google images and download the first 3 images it finds.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;for j, astronomer in enumerate(most_successful_astronomers, 1):
    searchTerm = astronomer
    searchTerm = searchTerm.replace(&amp;#39; &amp;#39;,&amp;#39;%20&amp;#39;)
 
    count= 0
 
    for i in range(0,1):
        url = (&amp;#39;https://ajax.googleapis.com/ajax/services/search/images?&amp;#39; +
               &amp;#39;v=1.0&amp;amp;q=&amp;#39;+searchTerm+&amp;#39;&amp;amp;start=&amp;#39;+str(i*4)+&amp;#39;&amp;amp;userip=MyIP&amp;#39;)
        #print url
        request = urllib2.Request(url, None, {&amp;#39;Referer&amp;#39;: &amp;#39;testing&amp;#39;})
        response = urllib2.urlopen(request)
 
        # Get results using JSON
        try:
            results = simplejson.load(response)
            data = results[&amp;#39;responseData&amp;#39;]
            dataInfo = data[&amp;#39;results&amp;#39;]
        except TypeError:
            pass
 
        for i,myUrl in enumerate(dataInfo):
            if i &amp;lt; numwanted:
                count = count + 1
                try:
                    myopener.retrieve(myUrl[&amp;#39;unescapedUrl&amp;#39;],\
                        &amp;#39;./astronomers/&amp;#39;+str(j)+&amp;#39;-&amp;#39;+astronomer.split(&amp;#39;,&amp;#39;)[0]+&amp;#39;-&amp;#39;+str(i)+&amp;#39;.jpg&amp;#39;)
                except IOError or TypeError:
                    pass
 
        time.sleep(1.5)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Without further ado, I present the Top 100 most cited astronomers as of today. Images are shown where Google could find them.&lt;/p&gt;

&lt;table style=&quot;font-size: 90%; text-align: center&quot;&gt;
&lt;tr&gt;
&lt;th&gt;Rank&lt;/th&gt;&lt;th&gt;Astronomer&lt;/th&gt;&lt;th&gt;Image&lt;/th&gt;&lt;th&gt;Citations&lt;/th&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;1&lt;/td&gt;&lt;td&gt;Spitzer, Lyman&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Spitzer.jpg &quot; alt=&quot;Spitzer, Lyman&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;23096&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;2&lt;/td&gt;&lt;td&gt;Chandrasekhar, Subrahmanyan&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Chandrasekhar.jpg &quot; alt=&quot;Chandrasekhar, Subrahmanyan&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;21467&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;3&lt;/td&gt;&lt;td&gt;Hawking, S. W.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Hawking.jpg &quot; alt=&quot;Hawking, S. W.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;20456&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;4&lt;/td&gt;&lt;td&gt;Press, William H.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Press.jpg &quot; alt=&quot;Press, William H.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;20431&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;5&lt;/td&gt;&lt;td&gt;Abramowitz, Milton&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Abramowitz.jpg &quot; alt=&quot;Abramowitz, Milton&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;18802&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;6&lt;/td&gt;&lt;td&gt;Peebles, Phillip James Edwin&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Peebles.jpg &quot; alt=&quot;Peebles, Phillip James Edwin&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;15891&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;7&lt;/td&gt;&lt;td&gt;Parker, E. N.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Parker.jpg &quot; alt=&quot;Parker, E. N.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;15649&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;8&lt;/td&gt;&lt;td&gt;Riess, Adam G.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Riess.jpg &quot; alt=&quot;Riess, Adam G.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;14557&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;9&lt;/td&gt;&lt;td&gt;Weinberg, Steven&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Weinberg.jpg &quot; alt=&quot;Weinberg, Steven&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;13431&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10&lt;/td&gt;&lt;td&gt;Draine, B. T.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Draine.jpg &quot; alt=&quot;Draine, B. T.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;13385&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;11&lt;/td&gt;&lt;td&gt;Spergel, D. N.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Spergel.jpg &quot; alt=&quot;Spergel, D. N.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;13225&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;12&lt;/td&gt;&lt;td&gt;Goldreich, Peter&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Goldreich.jpg &quot; alt=&quot;Goldreich, Peter&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;13174&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;13&lt;/td&gt;&lt;td&gt;Landau, Lev Davidovich&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Landau.jpg &quot; alt=&quot;Landau, Lev Davidovich&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;12915&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;14&lt;/td&gt;&lt;td&gt;Toomre, Alar&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Toomre.jpg &quot; alt=&quot;Toomre, Alar&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;12894&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;15&lt;/td&gt;&lt;td&gt;Woosley, S. E.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Woosley.jpg &quot; alt=&quot;Woosley, S. E.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;12684&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;16&lt;/td&gt;&lt;td&gt;Blandford, R. D.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Blandford.jpg &quot; alt=&quot;Blandford, R. D.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;12092&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;17&lt;/td&gt;&lt;td&gt;Osterbrock, Donald E.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Osterbrock.jpg &quot; alt=&quot;Osterbrock, Donald E.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;11707&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;18&lt;/td&gt;&lt;td&gt;Binney, James&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Binney.jpg &quot; alt=&quot;Binney, James&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;11567&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;19&lt;/td&gt;&lt;td&gt;Navarro, Julio F.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Navarro.jpg &quot; alt=&quot;Navarro, Julio F.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;11525&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;20&lt;/td&gt;&lt;td&gt;Johnson, Harold L.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Johnson.jpg &quot; alt=&quot;Johnson, Harold L.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;10876&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;21&lt;/td&gt;&lt;td&gt;Perlmutter, S.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Perlmutter.jpg &quot; alt=&quot;Perlmutter, S.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;10332&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;22&lt;/td&gt;&lt;td&gt;Komatsu, E.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Komatsu.jpg &quot; alt=&quot;Komatsu, E.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;10157&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;23&lt;/td&gt;&lt;td&gt;Springel, Volker&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Springel.jpg &quot; alt=&quot;Springel, Volker&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;9690&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;24&lt;/td&gt;&lt;td&gt;Randall, Lisa&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Randall.jpg &quot; alt=&quot;Randall, Lisa&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;9530&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;25&lt;/td&gt;&lt;td&gt;Dressler, A.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Dressler.jpg &quot; alt=&quot;Dressler, A.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;9460&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;26&lt;/td&gt;&lt;td&gt;Condon, J. J.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Condon.jpg &quot; alt=&quot;Condon, J. J.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;9211&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;27&lt;/td&gt;&lt;td&gt;Tegmark, Max&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Tegmark.jpg &quot; alt=&quot;Tegmark, Max&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;9142&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;28&lt;/td&gt;&lt;td&gt;Anders, Edward&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Anders.jpg &quot; alt=&quot;Anders, Edward&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;8973&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;29&lt;/td&gt;&lt;td&gt;Eggen, O. J.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Eggen.jpg &quot; alt=&quot;Eggen, O. J.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;8723&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;&lt;td&gt;Bekenstein, Jacob D.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bekenstein.jpg &quot; alt=&quot;Bekenstein, Jacob D.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;8624&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;&lt;td&gt;Schlegel, David J.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Schlegel.jpg &quot; alt=&quot;Schlegel, David J.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;8576&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;&lt;td&gt;Linde, A. D.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Linde.jpg &quot; alt=&quot;Linde, A. D.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;8343&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;&lt;td&gt;Gunn, James E.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Gunn.jpg &quot; alt=&quot;Gunn, James E.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;8296&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;&lt;td&gt;Fukugita, M.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Fukugita.jpg &quot; alt=&quot;Fukugita, M.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;8205&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;&lt;td&gt;Rieke, G. H.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Rieke.jpg &quot; alt=&quot;Rieke, G. H.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;8200&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;&lt;td&gt;Bessell, M. S.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bessell.jpg &quot; alt=&quot;Bessell, M. S.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7824&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;&lt;td&gt;Kurucz, R. L.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Kurucz.jpg &quot; alt=&quot;Kurucz, R. L.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7818&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;38&lt;/td&gt;&lt;td&gt;Allen, C. W.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Allen.jpg &quot; alt=&quot;Allen, C. W.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7789&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;39&lt;/td&gt;&lt;td&gt;Stetson, Peter B.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Stetson.jpg &quot; alt=&quot;Stetson, Peter B.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7736&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;40&lt;/td&gt;&lt;td&gt;Gradshteyn, I. S.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Gradshteyn.jpg &quot; alt=&quot;Gradshteyn, I. S.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7667&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;41&lt;/td&gt;&lt;td&gt;Dziewonski, Adam M.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Dziewonski.jpg &quot; alt=&quot;Dziewonski, Adam M.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7662&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;42&lt;/td&gt;&lt;td&gt;Davis, M.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Davis.jpg &quot; alt=&quot;Davis, M.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7352&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;43&lt;/td&gt;&lt;td&gt;Perdew, J. P.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Perdew.jpg &quot; alt=&quot;Perdew, J. P.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7337&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;44&lt;/td&gt;&lt;td&gt;Mihalas, Dimitri&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Mihalas.jpg &quot; alt=&quot;Mihalas, Dimitri&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7284&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;45&lt;/td&gt;&lt;td&gt;Guth, Alan H.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Guth.jpg &quot; alt=&quot;Guth, Alan H.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7275&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;46&lt;/td&gt;&lt;td&gt;Padmanabhan, T.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Padmanabhan.jpg &quot; alt=&quot;Padmanabhan, T.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7268&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;47&lt;/td&gt;&lt;td&gt;Harris, William E.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Harris.jpg &quot; alt=&quot;Harris, William E.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7226&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;48&lt;/td&gt;&lt;td&gt;Sanders, D. B.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Sanders.jpg &quot; alt=&quot;Sanders, D. B.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7215&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;49&lt;/td&gt;&lt;td&gt;Shakura, N. I.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Shakura.jpg &quot; alt=&quot;Shakura, N. I.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7162&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;50&lt;/td&gt;&lt;td&gt;Salpeter, Edwin E.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Salpeter.jpg &quot; alt=&quot;Salpeter, Edwin E.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;7109&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;51&lt;/td&gt;&lt;td&gt;Landolt, Arlo U.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Landolt.jpg &quot; alt=&quot;Landolt, Arlo U.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6841&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;52&lt;/td&gt;&lt;td&gt;Madau, Piero&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Madau.jpg &quot; alt=&quot;Madau, Piero&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6779&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;53&lt;/td&gt;&lt;td&gt;Misner, Charles W.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Misner.jpg &quot; alt=&quot;Misner, Charles W.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6768&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;54&lt;/td&gt;&lt;td&gt;Bruzual, G.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bruzual.jpg &quot; alt=&quot;Bruzual, G.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6712&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;55&lt;/td&gt;&lt;td&gt;Burstein, D.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Burstein.jpg &quot; alt=&quot;Burstein, D.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6686&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;56&lt;/td&gt;&lt;td&gt;Bennett, C. L.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bennett.jpg &quot; alt=&quot;Bennett, C. L.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6630&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;57&lt;/td&gt;&lt;td&gt;Cardelli, Jason A.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Cardelli.jpg &quot; alt=&quot;Cardelli, Jason A.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6581&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;58&lt;/td&gt;&lt;td&gt;Kroupa, Pavel&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Kroupa.jpg &quot; alt=&quot;Kroupa, Pavel&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6430&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;59&lt;/td&gt;&lt;td&gt;York, Donald G.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/York.jpg &quot; alt=&quot;York, Donald G.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6357&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;60&lt;/td&gt;&lt;td&gt;Eisenstein, Daniel J.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Eisenstein.jpg &quot; alt=&quot;Eisenstein, Daniel J.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6080&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;61&lt;/td&gt;&lt;td&gt;Moore, Ben&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Moore.jpg &quot; alt=&quot;Moore, Ben&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;6048&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;62&lt;/td&gt;&lt;td&gt;Copeland, Edmund J.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Copeland.jpg &quot; alt=&quot;Copeland, Edmund J.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5956&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;63&lt;/td&gt;&lt;td&gt;Seljak, Uros&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Seljak.jpg &quot; alt=&quot;Seljak, Uros&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5925&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;64&lt;/td&gt;&lt;td&gt;Bak, Per&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bak.jpg &quot; alt=&quot;Bak, Per&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5675&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;65&lt;/td&gt;&lt;td&gt;Balbus, Steven A.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Balbus.jpg &quot; alt=&quot;Balbus, Steven A.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5596&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;66&lt;/td&gt;&lt;td&gt;White, S. D. M.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/White.jpg &quot; alt=&quot;White, S. D. M.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5419&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;67&lt;/td&gt;&lt;td&gt;Albrecht, Andreas&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Albrecht.jpg &quot; alt=&quot;Albrecht, Andreas&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5399&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;68&lt;/td&gt;&lt;td&gt;Freedman, Wendy L.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Freedman.jpg &quot; alt=&quot;Freedman, Wendy L.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5351&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;69&lt;/td&gt;&lt;td&gt;Herzberg, Gerhard&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Herzberg.jpg &quot; alt=&quot;Herzberg, Gerhard&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5288&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;70&lt;/td&gt;&lt;td&gt;Abazajian, Kevork N.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Abazajian.jpg &quot; alt=&quot;Abazajian, Kevork N.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5261&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;71&lt;/td&gt;&lt;td&gt;Chabrier, Gilles&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Chabrier.jpg &quot; alt=&quot;Chabrier, Gilles&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5236&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;72&lt;/td&gt;&lt;td&gt;Grevesse, N.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Grevesse.jpg &quot; alt=&quot;Grevesse, N.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5235&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;73&lt;/td&gt;&lt;td&gt;King, Ivan R.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/King.jpg &quot; alt=&quot;King, Ivan R.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5124&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;74&lt;/td&gt;&lt;td&gt;Antonucci, R.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Antonucci.jpg &quot; alt=&quot;Antonucci, R.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;5091&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;75&lt;/td&gt;&lt;td&gt;Mathis, J. S.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Mathis.jpg &quot; alt=&quot;Mathis, J. S.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4986&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;76&lt;/td&gt;&lt;td&gt;Fukuda, Y.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Fukuda.jpg &quot; alt=&quot;Fukuda, Y.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4968&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;77&lt;/td&gt;&lt;td&gt;Ferrarese, Laura&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Ferrarese.jpg &quot; alt=&quot;Ferrarese, Laura&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4954&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;78&lt;/td&gt;&lt;td&gt;Shapiro, Stuart L.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Shapiro.jpg &quot; alt=&quot;Shapiro, Stuart L.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4888&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;79&lt;/td&gt;&lt;td&gt;Jackson, John David&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Jackson.jpg &quot; alt=&quot;Jackson, John David&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4848&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;80&lt;/td&gt;&lt;td&gt;Leitherer, Claus&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Leitherer.jpg &quot; alt=&quot;Leitherer, Claus&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4819&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;81&lt;/td&gt;&lt;td&gt;Perryman, M. A. C.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Perryman.jpg &quot; alt=&quot;Perryman, M. A. C.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4804&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;82&lt;/td&gt;&lt;td&gt;Shu, F. H.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Shu.jpg &quot; alt=&quot;Shu, F. H.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4749&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;83&lt;/td&gt;&lt;td&gt;Pringle, J. E.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Pringle.jpg &quot; alt=&quot;Pringle, J. E.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4622&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;84&lt;/td&gt;&lt;td&gt;Sze, S. M.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Sze.jpg &quot; alt=&quot;Sze, S. M.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4594&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;85&lt;/td&gt;&lt;td&gt;Bertin, E.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bertin.jpg &quot; alt=&quot;Bertin, E.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4505&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;86&lt;/td&gt;&lt;td&gt;Savage, B. D.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Savage.jpg &quot; alt=&quot;Savage, B. D.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4372&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;87&lt;/td&gt;&lt;td&gt;Gebhardt, Karl&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Gebhardt.jpg &quot; alt=&quot;Gebhardt, Karl&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4372&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;88&lt;/td&gt;&lt;td&gt;Caldwell, R. R.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Caldwell.jpg &quot; alt=&quot;Caldwell, R. R.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4352&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;89&lt;/td&gt;&lt;td&gt;Bethe, H. A.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bethe.jpg &quot; alt=&quot;Bethe, H. A.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4342&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;90&lt;/td&gt;&lt;td&gt;Mohapatra, Rabindra N.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Mohapatra.jpg &quot; alt=&quot;Mohapatra, Rabindra N.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4313&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;91&lt;/td&gt;&lt;td&gt;Raymond, J. C.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Raymond.jpg &quot; alt=&quot;Raymond, J. C.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4260&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;92&lt;/td&gt;&lt;td&gt;Novoselov, K. S.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Novoselov.jpg &quot; alt=&quot;Novoselov, K. S.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4248&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;93&lt;/td&gt;&lt;td&gt;Skrutskie, M. F.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Skrutskie.jpg &quot; alt=&quot;Skrutskie, M. F.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4218&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;94&lt;/td&gt;&lt;td&gt;Schechter, P.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Schechter.jpg &quot; alt=&quot;Schechter, P.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4136&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;95&lt;/td&gt;&lt;td&gt;Bohlin, R. C.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bohlin.jpg &quot; alt=&quot;Bohlin, R. C.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;4007&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;96&lt;/td&gt;&lt;td&gt;Tremaine, Scott&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Tremaine.jpg &quot; alt=&quot;Tremaine, Scott&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;3999&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;97&lt;/td&gt;&lt;td&gt;Abell, George O.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Abell.jpg &quot; alt=&quot;Abell, George O.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;3975&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;98&lt;/td&gt;&lt;td&gt;Bardeen, J. M.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Bardeen.jpg &quot; alt=&quot;Bardeen, J. M.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;3927&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;99&lt;/td&gt;&lt;td&gt;Dickey, J. M.&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Dickey.jpg &quot; alt=&quot;Dickey, J. M.&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;3877&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;100&lt;/td&gt;&lt;td&gt;Mayor, Michel&lt;/td&gt;&lt;td&gt;&lt;img src=&quot;/assets/astronomers/Mayor.jpg &quot; alt=&quot;Mayor, Michel&quot; style=&quot;width:75px&quot;&gt;&lt;/td&gt;&lt;td&gt;3847&lt;/td&gt;
&lt;/tr&gt;
&lt;/table&gt;
</description>
                <pubDate>Mon, 28 Oct 2013 00:00:00 -0400</pubDate>
                <link>http://brendangriffen.com/blog/ADS-topastronomers</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/ADS-topastronomers</guid>
            </item>
        
            <item>
                <title>Generate Word Maps In Different Languages Using XML</title>
                <description>&lt;p&gt;A number of “word maps” have been created over the last few years using SVG (“scalable vector format”) images. These are a great way to see how similarly spoken words are spread geographically throughout different parts of the world. I wondered how you these maps are created and wanted to generalise them by plugging them into Google Translate so that I could get a projection of any word. &lt;/p&gt;

&lt;p&gt;First, we begin with the &lt;a href=&quot;/assets/xml-maps/europe_template.svg&quot;&gt;default SVG of Europe&lt;/a&gt;. Here you can see an underlying map of Europe randomly colour coded with their ISO 639 country codes. Wikipedia has a great compiled list of all of these. Since the SVG file contains information which can be modified. If you open the file up in a text editor you’ll find a whole heap of information about the file. In particular, you’ll find snippets of code which look like this:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;&amp;lt;text&amp;gt;
xml:space=&amp;quot;preserve&amp;quot;
style=&amp;quot;font-size:24.37975121px;
font-style:normal;
font-variant:normal;
font-weight:normal;
font-stretch:normal;
line-height:125%;
letter-spacing:0px;
word-spacing:0px;
fill:#000000;
fill-opacity:1;
stroke:none;
font-family:Arial;-inkscape-font-specification:Arial&amp;quot;
x=&amp;quot;569.73621&amp;quot;
y=&amp;quot;872.60992&amp;quot;
id=&amp;quot;text4292&amp;quot;
odipodi:linespacing=&amp;quot;125%&amp;quot;&amp;gt;;
&amp;lt;tspan&amp;gt;
sodipodi:role=&amp;quot;line&amp;quot;
id=&amp;quot;tspan4294&amp;quot;
x=&amp;quot;569.73621&amp;quot;
y=&amp;quot;872.60992&amp;quot;&amp;gt;$ita
&amp;lt;/tspan&amp;gt;
&amp;lt;/text&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here it provides the information about Italy. The text which overlays Italy is the very last term &lt;strong&gt;$ita&lt;/strong&gt;. All we have to do is write a program to replace this placeholder with our translated word. The Python language has now become my staple for things like this and so I wrote a program to do just this:&lt;/p&gt;

&lt;p&gt;First we need a list of translations for a given input word. Rather than write my own python module to plugin to Google Translate I used the work of &lt;a href=&quot;https://github.com/terryyin&quot;&gt;Terryyin&lt;/a&gt; on Github and his &lt;a href=&quot;https://github.com/terryyin/google-translate-python&quot;&gt;google-translate-python&lt;/a&gt; module. After cloning the repository and installing the module it worked out of the box: &lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;from translate import Translator&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We needed few lists to convert between the different codes and languages. I’ve since found a nicer way to do this but this works, albeit crudely.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;word = sys.argv[1]
 
googleinput = \
[&amp;#39;ab&amp;#39;,&amp;#39;aa&amp;#39;,&amp;#39;af&amp;#39;,&amp;#39;ak&amp;#39;,&amp;#39;sq&amp;#39;,&amp;#39;am&amp;#39;,&amp;#39;ar&amp;#39;,&amp;#39;an&amp;#39;,&amp;#39;hy&amp;#39;,&amp;#39;as&amp;#39;,&amp;#39;av&amp;#39;,\
&amp;#39;ae&amp;#39;,&amp;#39;ay&amp;#39;,&amp;#39;az&amp;#39;,&amp;#39;bm&amp;#39;,&amp;#39;ba&amp;#39;,&amp;#39;eu&amp;#39;,&amp;#39;be&amp;#39;,&amp;#39;bn&amp;#39;,&amp;#39;bh&amp;#39;,&amp;#39;bi&amp;#39;,&amp;#39;bs&amp;#39;,&amp;#39;br&amp;#39;,&amp;#39;bg&amp;#39;,&amp;#39;my&amp;#39;,\
&amp;#39;ca&amp;#39;,&amp;#39;ch&amp;#39;,&amp;#39;ce&amp;#39;,&amp;#39;ny&amp;#39;,&amp;#39;zh&amp;#39;,&amp;#39;cv&amp;#39;,&amp;#39;kw&amp;#39;,&amp;#39;co&amp;#39;,&amp;#39;cr&amp;#39;,&amp;#39;hr&amp;#39;,&amp;#39;cs&amp;#39;,&amp;#39;da&amp;#39;,&amp;#39;dv&amp;#39;,&amp;#39;nl&amp;#39;,\
&amp;#39;dz&amp;#39;,&amp;#39;en&amp;#39;,&amp;#39;eo&amp;#39;,&amp;#39;et&amp;#39;,&amp;#39;ee&amp;#39;, &amp;#39;fo&amp;#39;,&amp;#39;fj&amp;#39;,&amp;#39;fi&amp;#39;,&amp;#39;fr&amp;#39;,&amp;#39;ff&amp;#39;,&amp;#39;gl&amp;#39;,&amp;#39;ka&amp;#39;,&amp;#39;de&amp;#39;,&amp;#39;el&amp;#39;,\
&amp;#39;gn&amp;#39;,&amp;#39;gu&amp;#39;, &amp;#39;ht&amp;#39;,&amp;#39;ha&amp;#39;,&amp;#39;he&amp;#39;,&amp;#39;hz&amp;#39;,&amp;#39;hi&amp;#39;,&amp;#39;ho&amp;#39;,&amp;#39;hu&amp;#39;,&amp;#39;ia&amp;#39;,&amp;#39;id&amp;#39;,&amp;#39;ie&amp;#39;,&amp;#39;ga&amp;#39;, &amp;#39;ig&amp;#39;,\
&amp;#39;ik&amp;#39;,&amp;#39;io&amp;#39;,&amp;#39;is&amp;#39;,&amp;#39;it&amp;#39;,&amp;#39;iu&amp;#39;,&amp;#39;ja&amp;#39;,&amp;#39;jv&amp;#39;,&amp;#39;kl&amp;#39;,&amp;#39;kn&amp;#39;,&amp;#39;kr&amp;#39;,&amp;#39;ks&amp;#39;,&amp;#39;kk&amp;#39;,&amp;#39;km&amp;#39;,&amp;#39;ki&amp;#39;,&amp;#39;rw&amp;#39;,\
&amp;#39;ky&amp;#39;,&amp;#39;kv&amp;#39;,&amp;#39;kg&amp;#39;,&amp;#39;ko&amp;#39;,&amp;#39;ku&amp;#39;,&amp;#39;kj&amp;#39;,&amp;#39;la&amp;#39;,&amp;#39;lb&amp;#39;,&amp;#39;lg&amp;#39;,&amp;#39;li&amp;#39;,&amp;#39;ln&amp;#39;,&amp;#39;lo&amp;#39;,&amp;#39;lt&amp;#39;,&amp;#39;lu&amp;#39;,&amp;#39;lv&amp;#39;,\
&amp;#39;gv&amp;#39;,&amp;#39;mk&amp;#39;, &amp;#39;mg&amp;#39;,&amp;#39;ms&amp;#39;,&amp;#39;ml&amp;#39;,&amp;#39;mt&amp;#39;,&amp;#39;mi&amp;#39;,&amp;#39;mr&amp;#39;,&amp;#39;mh&amp;#39;,&amp;#39;mn&amp;#39;,&amp;#39;na&amp;#39;,&amp;#39;nv&amp;#39;,&amp;#39;nb&amp;#39;,&amp;#39;nd&amp;#39;,&amp;#39;ne&amp;#39;,\
&amp;#39;ng&amp;#39;,&amp;#39;nn&amp;#39;,&amp;#39;no&amp;#39;,&amp;#39;ii&amp;#39;,&amp;#39;nr&amp;#39;,&amp;#39;oc&amp;#39;,&amp;#39;oj&amp;#39;,&amp;#39;cu&amp;#39;,&amp;#39;om&amp;#39;,&amp;#39;or&amp;#39;,&amp;#39;os&amp;#39;,&amp;#39;pa&amp;#39;,&amp;#39;pi&amp;#39;,&amp;#39;fa&amp;#39;,&amp;#39;pl&amp;#39;,\
&amp;#39;ps&amp;#39;,&amp;#39;pt&amp;#39;,&amp;#39;qu&amp;#39;,&amp;#39;rm&amp;#39;,&amp;#39;rn&amp;#39;,&amp;#39;ro&amp;#39;,&amp;#39;ru&amp;#39;,&amp;#39;sa&amp;#39;,&amp;#39;sc&amp;#39;,&amp;#39;sd&amp;#39;,&amp;#39;se&amp;#39;,&amp;#39;sm&amp;#39;,&amp;#39;sg&amp;#39;,&amp;#39;sr&amp;#39;,&amp;#39;gd&amp;#39;,\
&amp;#39;sn&amp;#39;,&amp;#39;si&amp;#39;,&amp;#39;sk&amp;#39;,&amp;#39;sl&amp;#39;,&amp;#39;so&amp;#39;,&amp;#39;st&amp;#39;,&amp;#39;es&amp;#39;,&amp;#39;su&amp;#39;,&amp;#39;sw&amp;#39;,&amp;#39;ss&amp;#39;,&amp;#39;sv&amp;#39;,&amp;#39;ta&amp;#39;,&amp;#39;te&amp;#39;,&amp;#39;tg&amp;#39;,&amp;#39;th&amp;#39;,\
&amp;#39;ti&amp;#39;,&amp;#39;bo&amp;#39;,&amp;#39;tk&amp;#39;,&amp;#39;tl&amp;#39;,&amp;#39;tn&amp;#39;,&amp;#39;to&amp;#39;,&amp;#39;tr&amp;#39;,&amp;#39;ts&amp;#39;,&amp;#39;tt&amp;#39;,&amp;#39;tw&amp;#39;,&amp;#39;ty&amp;#39;,&amp;#39;ug&amp;#39;,&amp;#39;uk&amp;#39;,&amp;#39;ur&amp;#39;,&amp;#39;uz&amp;#39;,\
&amp;#39;ve&amp;#39;,&amp;#39;vi&amp;#39;,&amp;#39;vo&amp;#39;,&amp;#39;wa&amp;#39;,&amp;#39;cy&amp;#39;,&amp;#39;wo&amp;#39;,&amp;#39;fy&amp;#39;,&amp;#39;xh&amp;#39;,&amp;#39;yi&amp;#39;,&amp;#39;yo&amp;#39;,&amp;#39;za&amp;#39;,&amp;#39;zu&amp;#39;]
 
langISO = \
[&amp;#39;abk&amp;#39;,&amp;#39;aar&amp;#39;,&amp;#39;afr&amp;#39;,&amp;#39;aka&amp;#39;,&amp;#39;sqi&amp;#39;,&amp;#39;amh&amp;#39;,&amp;#39;ara&amp;#39;,&amp;#39;arg&amp;#39;,\
&amp;#39;hye&amp;#39;,&amp;#39;asm&amp;#39;,&amp;#39;ava&amp;#39;,&amp;#39;ave&amp;#39;,&amp;#39;aym&amp;#39;,&amp;#39;aze&amp;#39;,&amp;#39;bam&amp;#39;,&amp;#39;bak&amp;#39;,\
&amp;#39;eus&amp;#39;,&amp;#39;bel&amp;#39;,&amp;#39;ben&amp;#39;,&amp;#39;bih&amp;#39;,&amp;#39;bis&amp;#39;,&amp;#39;bos&amp;#39;,&amp;#39;bre&amp;#39;,&amp;#39;bul&amp;#39;,\
&amp;#39;mya&amp;#39;,&amp;#39;cat&amp;#39;,&amp;#39;cha&amp;#39;,&amp;#39;che&amp;#39;,&amp;#39;nya&amp;#39;,&amp;#39;zho&amp;#39;,&amp;#39;chv&amp;#39;,&amp;#39;cor&amp;#39;,\
&amp;#39;cos&amp;#39;,&amp;#39;cre&amp;#39;,&amp;#39;hrv&amp;#39;,&amp;#39;ces&amp;#39;,&amp;#39;dan&amp;#39;,&amp;#39;div&amp;#39;,&amp;#39;nld&amp;#39;,&amp;#39;dzo&amp;#39;,\
&amp;#39;eng&amp;#39;,&amp;#39;epo&amp;#39;,&amp;#39;est&amp;#39;,&amp;#39;ewe&amp;#39;,&amp;#39;fao&amp;#39;,&amp;#39;fij&amp;#39;,&amp;#39;fin&amp;#39;,&amp;#39;fra&amp;#39;,\
&amp;#39;ful&amp;#39;,&amp;#39;glg&amp;#39;,&amp;#39;kat&amp;#39;,&amp;#39;deu&amp;#39;,&amp;#39;ell&amp;#39;,&amp;#39;grn&amp;#39;,&amp;#39;guj&amp;#39;,&amp;#39;hat&amp;#39;,\
&amp;#39;hau&amp;#39;,&amp;#39;heb&amp;#39;,&amp;#39;her&amp;#39;,&amp;#39;hin&amp;#39;,&amp;#39;hmo&amp;#39;,&amp;#39;hun&amp;#39;,&amp;#39;ina&amp;#39;,&amp;#39;ind&amp;#39;,\
&amp;#39;ile&amp;#39;,&amp;#39;gle&amp;#39;,&amp;#39;ibo&amp;#39;,&amp;#39;ipk&amp;#39;,&amp;#39;ido&amp;#39;,&amp;#39;isl&amp;#39;,&amp;#39;ita&amp;#39;,&amp;#39;iku&amp;#39;,\
&amp;#39;jpn&amp;#39;,&amp;#39;jav&amp;#39;,&amp;#39;kal&amp;#39;,&amp;#39;kan&amp;#39;,&amp;#39;kau&amp;#39;,&amp;#39;kas&amp;#39;,&amp;#39;kaz&amp;#39;,&amp;#39;khm&amp;#39;,\
&amp;#39;kik&amp;#39;,&amp;#39;kin&amp;#39;,&amp;#39;kir&amp;#39;,&amp;#39;kom&amp;#39;,&amp;#39;kon&amp;#39;,&amp;#39;kor&amp;#39;,&amp;#39;kur&amp;#39;,&amp;#39;kua&amp;#39;,\
&amp;#39;lat&amp;#39;,&amp;#39;ltz&amp;#39;,&amp;#39;lug&amp;#39;,&amp;#39;lim&amp;#39;,&amp;#39;lin&amp;#39;,&amp;#39;lao&amp;#39;,&amp;#39;lit&amp;#39;,&amp;#39;lub&amp;#39;,\
&amp;#39;lav&amp;#39;,&amp;#39;glv&amp;#39;,&amp;#39;mkd&amp;#39;,&amp;#39;mlg&amp;#39;,&amp;#39;msa&amp;#39;,&amp;#39;mal&amp;#39;,&amp;#39;mlt&amp;#39;,&amp;#39;mri&amp;#39;,\
&amp;#39;mar&amp;#39;,&amp;#39;mah&amp;#39;,&amp;#39;mon&amp;#39;,&amp;#39;nau&amp;#39;,&amp;#39;nav&amp;#39;,&amp;#39;nob&amp;#39;,&amp;#39;nde&amp;#39;,&amp;#39;nep&amp;#39;,\
&amp;#39;ndo&amp;#39;,&amp;#39;nno&amp;#39;,&amp;#39;nor&amp;#39;,&amp;#39;iii&amp;#39;,&amp;#39;nbl&amp;#39;,&amp;#39;oci&amp;#39;,&amp;#39;oji&amp;#39;,&amp;#39;chu&amp;#39;,\
&amp;#39;orm&amp;#39;,&amp;#39;ori&amp;#39;,&amp;#39;oss&amp;#39;,&amp;#39;pan&amp;#39;,&amp;#39;pli&amp;#39;,&amp;#39;fas&amp;#39;,&amp;#39;pol&amp;#39;,&amp;#39;pus&amp;#39;,\
&amp;#39;por&amp;#39;,&amp;#39;que&amp;#39;,&amp;#39;roh&amp;#39;,&amp;#39;run&amp;#39;,&amp;#39;ron&amp;#39;,&amp;#39;rus&amp;#39;,&amp;#39;san&amp;#39;,&amp;#39;srd&amp;#39;,\
&amp;#39;snd&amp;#39;,&amp;#39;sme&amp;#39;,&amp;#39;smo&amp;#39;,&amp;#39;sag&amp;#39;,&amp;#39;srp&amp;#39;,&amp;#39;gla&amp;#39;,&amp;#39;sna&amp;#39;,&amp;#39;sin&amp;#39;,\
&amp;#39;slk&amp;#39;,&amp;#39;slv&amp;#39;,&amp;#39;som&amp;#39;,&amp;#39;sot&amp;#39;,&amp;#39;spa&amp;#39;,&amp;#39;sun&amp;#39;,&amp;#39;swa&amp;#39;,&amp;#39;ssw&amp;#39;,\
&amp;#39;swe&amp;#39;,&amp;#39;tam&amp;#39;,&amp;#39;tel&amp;#39;,&amp;#39;tgk&amp;#39;,&amp;#39;tha&amp;#39;,&amp;#39;tir&amp;#39;,&amp;#39;bod&amp;#39;,&amp;#39;tuk&amp;#39;,\
&amp;#39;tgl&amp;#39;,&amp;#39;tsn&amp;#39;,&amp;#39;ton&amp;#39;,&amp;#39;tur&amp;#39;,&amp;#39;tso&amp;#39;,&amp;#39;tat&amp;#39;,&amp;#39;twi&amp;#39;,&amp;#39;tah&amp;#39;,\
&amp;#39;uig&amp;#39;,&amp;#39;ukr&amp;#39;,&amp;#39;urd&amp;#39;,&amp;#39;uzb&amp;#39;,&amp;#39;ven&amp;#39;,&amp;#39;vie&amp;#39;,&amp;#39;vol&amp;#39;,&amp;#39;wln&amp;#39;,\
&amp;#39;cym&amp;#39;,&amp;#39;wol&amp;#39;,&amp;#39;fry&amp;#39;,&amp;#39;xho&amp;#39;,&amp;#39;yid&amp;#39;,&amp;#39;yor&amp;#39;,&amp;#39;zha&amp;#39;,&amp;#39;zul&amp;#39;]
 
langlist = \
[&amp;#39;Abkhaz&amp;#39;,&amp;#39;Afar&amp;#39;,&amp;#39;Afrikaans&amp;#39;,&amp;#39;Akan&amp;#39;,&amp;#39;Albanian&amp;#39;,&amp;#39;Amharic&amp;#39;,\
&amp;#39;Arabic&amp;#39;,&amp;#39;Aragonese&amp;#39;,&amp;#39;Armenian&amp;#39;,&amp;#39;Assamese&amp;#39;,&amp;#39;Avaric&amp;#39;,&amp;#39;Avestan&amp;#39;,\
&amp;#39;Aymara&amp;#39;,&amp;#39;Azerbaijani&amp;#39;,&amp;#39;Bambara&amp;#39;,&amp;#39;Bashkir&amp;#39;,&amp;#39;Basque&amp;#39;,&amp;#39;Belarusian&amp;#39;,\
&amp;#39;Bengali&amp;#39;,&amp;#39;Bihari&amp;#39;,&amp;#39;Bislama&amp;#39;,&amp;#39;Bosnian&amp;#39;,&amp;#39;Breton&amp;#39;,&amp;#39;Bulgarian&amp;#39;,\
&amp;#39;Burmese&amp;#39;,&amp;#39;Catalan&amp;#39;,&amp;#39;Chamorro&amp;#39;,&amp;#39;Chechen&amp;#39;,&amp;#39;Chichewa&amp;#39;,&amp;#39;Chinese&amp;#39;,\
&amp;#39;Chuvash&amp;#39;,&amp;#39;Cornish&amp;#39;,&amp;#39;Corsican&amp;#39;,&amp;#39;Cree&amp;#39;,&amp;#39;Croatian&amp;#39;,&amp;#39;Czech&amp;#39;,&amp;#39;Danish&amp;#39;,\
&amp;#39;Divehi&amp;#39;,&amp;#39;Dutch&amp;#39;,&amp;#39;Dzongkha&amp;#39;,&amp;#39;English&amp;#39;,&amp;#39;Esperanto&amp;#39;,&amp;#39;Estonian&amp;#39;,\
&amp;#39;Ewe&amp;#39;,&amp;#39;Faroese&amp;#39;,&amp;#39;Fijian&amp;#39;,&amp;#39;Finnish&amp;#39;,&amp;#39;French&amp;#39;,&amp;#39;Fula; Fulah&amp;#39;,\
&amp;#39;Galician&amp;#39;,&amp;#39;Georgian&amp;#39;,&amp;#39;German&amp;#39;,&amp;#39;Greek&amp;#39;,&amp;#39;Guarani&amp;#39;,&amp;#39;Gujarati&amp;#39;,\
&amp;#39;Haitian&amp;#39;,&amp;#39;Hausa&amp;#39;,&amp;#39;Hebrew&amp;#39;,&amp;#39;Herero&amp;#39;,&amp;#39;Hindi&amp;#39;,&amp;#39;Hiri Motu&amp;#39;,\
&amp;#39;Hungarian&amp;#39;,&amp;#39;Interlingua&amp;#39;,&amp;#39;Indonesian&amp;#39;,&amp;#39;Interlingue&amp;#39;,&amp;#39;Irish&amp;#39;,\
&amp;#39;Igbo&amp;#39;,&amp;#39;Inupiaq&amp;#39;,&amp;#39;Ido&amp;#39;,&amp;#39;Icelandic&amp;#39;,&amp;#39;Italian&amp;#39;,&amp;#39;Inuktitut&amp;#39;,\
&amp;#39;Japanese&amp;#39;,&amp;#39;Javanese&amp;#39;,&amp;#39;Kalaallisut&amp;#39;,&amp;#39;Kannada&amp;#39;,&amp;#39;Kanuri&amp;#39;,&amp;#39;Kashmiri&amp;#39;,\
&amp;#39;Kazakh&amp;#39;,&amp;#39;Khmer&amp;#39;,&amp;#39;Kikuyu&amp;#39;,&amp;#39;Kinyarwanda&amp;#39;,&amp;#39;Kyrgyz&amp;#39;,&amp;#39;Komi&amp;#39;,&amp;#39;Kongo&amp;#39;,\
 &amp;#39;Korean&amp;#39;,&amp;#39;Kurdish&amp;#39;,&amp;#39;Kwanyama&amp;#39;,&amp;#39;Latin&amp;#39;,&amp;#39;Luxembourgish&amp;#39;,&amp;#39;Ganda&amp;#39;,\
&amp;#39;Limburgish&amp;#39;,&amp;#39;Lingala&amp;#39;,&amp;#39;Lao&amp;#39;,&amp;#39;Lithuanian&amp;#39;,&amp;#39;Luba-Katanga&amp;#39;,\
&amp;#39;Latvian&amp;#39;,&amp;#39;Manx&amp;#39;,&amp;#39;Macedonian&amp;#39;,&amp;#39;Malagasy&amp;#39;,&amp;#39;Malay&amp;#39;,&amp;#39;Malayalam&amp;#39;\
,&amp;#39;Maltese&amp;#39;,&amp;#39;Maori&amp;#39;,&amp;#39;Marathi&amp;#39;,&amp;#39;Marshallese&amp;#39;,&amp;#39;Mongolian&amp;#39;,&amp;#39;Nauru&amp;#39;\
,&amp;#39;Navajo, Navaho&amp;#39;,&amp;#39;Norwegian Bokmal&amp;#39;,&amp;#39;North Ndebele&amp;#39;,&amp;#39;Nepali&amp;#39;\
,&amp;#39;Ndonga&amp;#39;,&amp;#39;Norwegian Nynorsk&amp;#39;,&amp;#39;Norwegian&amp;#39;,&amp;#39;Nuosu&amp;#39;,&amp;#39;South Ndebele&amp;#39;\
,&amp;#39;Occitan&amp;#39;,&amp;#39;Ojibwe&amp;#39;,&amp;#39;Old Church Slavonic&amp;#39;,&amp;#39;Oromo&amp;#39;,&amp;#39;Oriya&amp;#39;\
,&amp;#39;Ossetian&amp;#39;,&amp;#39;Panjabi&amp;#39;,&amp;#39;Pali&amp;#39;,&amp;#39;Persian&amp;#39;,&amp;#39;Polish&amp;#39;,&amp;#39;Pashto&amp;#39;\
,&amp;#39;Portuguese&amp;#39;,&amp;#39;Quechua&amp;#39;,&amp;#39;Romansh&amp;#39;,&amp;#39;Kirundi&amp;#39;,&amp;#39;Romanian&amp;#39;\
,&amp;#39;Russian&amp;#39;,&amp;#39;Sanskrit&amp;#39;,&amp;#39;Sardinian&amp;#39;,&amp;#39;Sindhi&amp;#39;,&amp;#39;Northern Sami&amp;#39;\
,&amp;#39;Samoan&amp;#39;,&amp;#39;Sango&amp;#39;,&amp;#39;Serbian&amp;#39;,&amp;#39;Scottish Gaelic&amp;#39;,&amp;#39;Shona&amp;#39;\
,&amp;#39;Sinhala&amp;#39;,&amp;#39;Slovak&amp;#39;,&amp;#39;Slovene&amp;#39;,&amp;#39;Somali&amp;#39;,&amp;#39;Southern Sotho&amp;#39;\
,&amp;#39;Spanish&amp;#39;,&amp;#39;Sundanese&amp;#39;,&amp;#39;Swahili&amp;#39;,&amp;#39;Swati&amp;#39;,&amp;#39;Swedish&amp;#39;,&amp;#39;Tamil&amp;#39;\
,&amp;#39;Telugu&amp;#39;,&amp;#39;Tajik&amp;#39;,&amp;#39;Thai&amp;#39;,&amp;#39;Tigrinya&amp;#39;,&amp;#39;Tibetan Standard&amp;#39;\
,&amp;#39;Turkmen&amp;#39;,&amp;#39;Tagalog&amp;#39;,&amp;#39;Tswana&amp;#39;,&amp;#39;Tonga&amp;#39;,&amp;#39;Turkish&amp;#39;,&amp;#39;Tsonga&amp;#39;\
,&amp;#39;Tatar&amp;#39;,&amp;#39;Twi&amp;#39;,&amp;#39;Tahitian&amp;#39;,&amp;#39;Uighur&amp;#39;,&amp;#39;Ukrainian&amp;#39;,&amp;#39;Urdu&amp;#39;\
,&amp;#39;Uzbek&amp;#39;,&amp;#39;Venda&amp;#39;,&amp;#39;Vietnamese&amp;#39;,&amp;#39;Volapuk&amp;#39;,&amp;#39;Walloon&amp;#39;,&amp;#39;Welsh&amp;#39;,\
&amp;#39;Wolof&amp;#39;,&amp;#39;Western Frisian&amp;#39;,&amp;#39;Xhosa&amp;#39;,&amp;#39;Yiddish&amp;#39;,&amp;#39;Yoruba&amp;#39;,&amp;#39;Zhuang&amp;#39;\ ,&amp;#39;Zulu&amp;#39;]
 
f = open(filename,&amp;#39;w&amp;#39;) for lang in maplanguage:
    colindex = 0
    index = -1
    for ref in langISO:
    index += 1
    if ref == lang:
        ref_use = googleinput[index]
        translator = Translator(to_lang=ref_use)
        translation = translator.translate(word)
        lineout = lang + &amp;#39;,&amp;#39; + translation + &amp;#39;,red&amp;#39; + &amp;#39;\n&amp;#39;
        f.write(lineout.encode(&amp;#39;UTF-8&amp;#39;))
        colindex += 1
 
f.close()&amp;lt;/span&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;First we need to open the file in conjunction with a dictionary.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;theMap = open(&amp;#39;./templates/europe_template.svg&amp;#39;,&amp;quot;r&amp;quot;)
theMapSource = theMap.read()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we need to construct the dictionaries.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;languageDic=[]
wordDic=[]
colorDic=[]
try:
theDictionary = open(filename,&amp;quot;r&amp;quot;)
except:
print &amp;#39;You need to provide a dictionary.&amp;#39;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We then need to read/parse and populate the word dictionary&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;for line in theDictionary.readlines():
 languageDic.append( line.split(&amp;#39;,&amp;#39;)[0] )
 try:
    wordDic.append( line.split(&amp;#39;,&amp;#39;)[1] )
    if wordDic[-1]==&amp;#39;?&amp;#39;:
        wordDic[-1]=&amp;#39;&amp;#39;
    except:
        wordDic.append( &amp;#39;&amp;#39; )&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we just need to replace those ISO codes with the new translations:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;for i,lang in enumerate(languageDic):
    theMapSource=theMapSource.replace(&amp;#39;$&amp;#39;+lang,wordDic[i])&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are also a bunch of languages with no Google translation at the present time. I simply hard coded these.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;theMapSource=theMapSource.replace(&amp;#39;$xal&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$gag&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$nap&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$lig&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$sic&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$krl&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$sar&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$pms&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$sco&amp;#39;,&amp;#39;?&amp;#39;)
theMapSource=theMapSource.replace(&amp;#39;$occ&amp;#39;,&amp;#39;?&amp;#39;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we just output the map.&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-python&quot; data-lang=&quot;python&quot;&gt;theNewMap = open(outputMap, &amp;#39;w&amp;#39;)
theNewMap.write(theMapSource)
theNewMap.close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The result is now a series of rendered maps for different inputs. As you can see, some languages are missing and outright wrong. In many countries, the input word appears as the placeholder — this means the code needs improving to catch these self-similar input/outputs. I also have extra code to modify the colours of each country but I haven’t come up with a way to do this automatically as one would need a synthetic way to group words based on phonetic/origin similarities which, to my knowledge, is quite difficult and an active area of study in the field of natural language processing(?). There is a lot of room for improvement so please feel free to comment or contribute directly via the &lt;a href=&quot;https://github.com/bgriffen/wordmapper&quot;&gt;Github repository&lt;/a&gt; for this program. I’ve begun making an interactive version of this map (and some variants) which I hope to post soon.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/xml-maps/europe_BREAD.png&quot; alt=&quot;Bread&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/xml-maps/europe_DOG.png&quot; alt=&quot;Dog&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/xml-maps/europe_PYTHON.png&quot; alt=&quot;Python&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/xml-maps/europe_ELEPHANT.png&quot; alt=&quot;Elephant&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/xml-maps/europe_UNIVERSE.png&quot; alt=&quot;Universe&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;
&lt;img src=&quot;/assets/xml-maps/europe_WATER.png&quot; alt=&quot;Water&quot;&gt;
&lt;br/&gt;
&lt;br/&gt;&lt;/p&gt;
</description>
                <pubDate>Tue, 27 Aug 2013 00:00:00 -0400</pubDate>
                <link>http://brendangriffen.com/blog/xml-map</link>
                <guid isPermaLink="true">http://brendangriffen.com/blog/xml-map</guid>
            </item>
        
    </channel>
</rss>